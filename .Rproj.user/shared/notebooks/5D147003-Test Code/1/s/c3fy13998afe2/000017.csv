"0","df = od_df"
"0","ylower = ""Origin County"""
"0","xlower = ""Destination County"""
"0","yupper = ""Origin Region"""
"0","xupper = ""Destination Region"""
"0","values = ""Migration"""
"0","rm_diag = F"
"0","bins = 15"
"0",""
"0","#' @title hhm"
"0","#'"
"0","#' @description Creates a labelled heatmap for heirarchical data."
"0","#'"
"0","#' @param df A data.frame with containing values with which to populate the heatmap. "
"0","#' The data.frame must nclude columns specifying the lower categories (ylower, "
"0","#' xlower) and upper groups (yupper, xupper) that each value corresponds to. These "
"0","#' categories and groups will be used to arrange and label the rows and columns of "
"0","#' the heatmap."
"0","#' @param ylower A column in `df` containing the categories that will be presented "
"0","#' as rows along the y-axis of the heatmap."
"0","#' @param xlower A column in `df` containing the categories that will be presented "
"0","#' as columns along the x-axis of the heatmap."
"0","#' @param yupper A column in `df` containing the groupings that will be used to "
"0","#' arrange the heatmap rows."
"0","#' @param xupper A column in `df` containing the groupings that will be used to "
"0","#' arrange the heatmap columns."
"0","#' @param values A column in `df` containing the values used to populate the "
"0","#' heatmap. "
"0","#' @param rm_diag Do not show values for categories along the x and y axes that "
"0","#' are identical (defaults to `FALSE`). This is particularly useful for "
"0","#' origin-destination where the user may want to hide the diagonal values."
"0","#' @param bins How many colour gradients to use in the legend (defaults to 15)."
"0","#'"
"0","#' @return A ggplot object containing the final heatmap."
"0","#' "
"0","#' @examples"
"0","#' # CREATE TOY DATA OF INTERNAL MIGRATION BETWEEN COUNTIES (LOWER LEVEL) AND REGIONS (UPPER LEVEL)"
"0","#' "
"0","#' # Define names of fake counties"
"0","#' fake_counties = c(""Greenridge"",""Windermoor"",""Bramblewood"",""Silverlake"",""Thornbury"",""Maplewood"","
"0","#'                   ""Hawthorne"",""Pinehurst"",""Riverton"",""Meadowbrook"",""Fairhaven"",""Oakdale"",""Stonebridge"","
"0","#'                   ""Brookfield"",""Ashford"",""Glenville"",""Sunnyvale"",""Westfield"")"
"0","#' "
"0","#' # Create region county lookup tables"
"0","#' rc_lkp = data.frame(region = c(rep(""North"",3),rep(""Midlands"",5),rep(""South West"",4),rep(""South East"",6)), county = fake_counties)"
"0","#' og_lkp = rc_lkp %>% setNames(c(""Origin Region""     ,""Origin County""     ))"
"0","#' dn_lkp = rc_lkp %>% setNames(c(""Destination Region"",""Destination County""))"
"0","#' "
"0","#' # Create dataframe of fake migration data"
"0","#' set.seed(1234)"
"0","#' od_df = expand.grid(fake_counties,fake_counties) %>% setNames(paste(c(""Origin"",""Destination""),""County"",sep="" "")) %>% full_join(og_lkp) %>% full_join(dn_lkp) %>% "
"0","#'         mutate(Migration = (1/rgamma(18*18, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round())"
"0","#' od_df[od_df$`Origin County` == od_df$`Destination County`,""Migration""] = od_df[od_df$`Origin County` == od_df$`Destination County`,""Migration""] * 10"
"0","#' "
"0","#' # RUN FUNCTION"
"0","#' "
"0","#' hierarchical_heatmap = hhm(df = od_df, ylower = ""Origin County"", xlower = ""Destination County"", yupper = ""Origin Region"", xupper = ""Destination Region"", values = ""values"")"
"0","#' @export"
"0","#' @importFrom dplyr ""%>%"""
"0","hhm = function(df,ylower,yupper,xlower,xupper,values,rm_diag=F,bins=15) {"
"0","  "
"0","  # Remove unwanted rows and format origin so geographies appear in alphabetical order"
"0","  df = df[,c(ylower,xlower,yupper,xupper,values)]"
"0","  "
"0","  # If user specified to remove diagonal values, set all observations where ylower and xlower are identical to zero"
"0","  if (rm_diag) {"
"0","    df[df[[ylower]] == df[[xlower]],values] = 0"
"0","  }"
"0","  "
"0","  # Create custom breaks for log scale"
"0","  cbrks = log_seq(999,bns) / 1000"
"0",""
"0","  # Define names of custom breaks"
"0","  brk_nms = c(0, paste(cbrks %>% .[1:(length(.)-1)] %>% sprintf(fmt = paste0('%#.3f')), "
"0","                       cbrks %>% .[2: length(.)   ] %>% sprintf(fmt = paste0('%#.3f')), sep = ""-""))"
"0","  "
"0","  # Create discrete scale based on these custom breaks"
"0","  df[[""scaled""]] = df[[paste0(var,""_scld"")]] %>% findInterval(cbrks) %>% ifelse(df[[paste0(var,""_scld"")]] == 0, 0, .) %>% "
"0","                   replace(. == length(cbrks), (length(cbrks)-1)) %>% {. + 1} %>% factor(levels = 1:bns, labels = brk_nms)"
"0","  "
"0","  # Create empty list to populate with ggplot heatmaps"
"0","  pl = list()"
"0","  "
"0","  # Counter to keep track of interations of nested for loop"
"0","  i = 0"
"0","  "
"0","  # For each origin region"
"0","  for (og in 1:length(rgns)) {"
"0","    "
"0","    # For each destination region"
"0","    for (dn in 1:length(rgns)) {"
"0","      "
"0","      # Increase interature counter by 1"
"0","      i = i + 1"
"0","      "
"0","      # Filter provincia-level migration data to only include origin and destination regions of interest"
"0","      sdf = df %>% filter(ogr == rgns[og] & dnr == rgns[dn]) %>%"
"0","                   mutate(Origin = factor(Origin, levels = Origin %>% unique() %>% rev() ))"
"0","      "
"0","      # Define main plot"
"0","      p = ggplot(sdf, aes(Destination, Origin)) +"
"0","        geom_tile(aes(fill = scaled), show.legend = T) +"
"0","        scale_fill_manual(name = ""Normalised\nCount"", values = cg(""white"",""#08306B"",bns), drop = F) +"
"0","        theme(plot.margin = unit(rep(0,4), ""cm""),"
"0","              axis.text.x  = element_text(angle = 90, hjust = 1.0, vjust = 0.3),"
"0","              axis.title.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5),"
"0","              axis.title.y = element_text(angle =  0, hjust = 0.5, vjust = 0.5),"
"0","              axis.ticks   = element_blank()) +"
"0","        labs(x = rgns[dn], y = rgns[og])"
"0","      "
"0","      # If bottom-left plot"
"0","      if (og == length(rgns) & dn == 1) {"
"0","        # Include provincia names on both axes"
"0","        p = p + theme(axis.title.x = element_blank(),"
"0","                      axis.title.y = element_blank())"
"0","      } else if (og < length(rgns) & dn == 1) { # If left-hand plot"
"0","        # Include provincia names on y-axis"
"0","        p = p + theme(axis.title.x = element_blank(),"
"0","                      axis.title.y = element_blank(),"
"0","                      axis.text.x  = element_blank())"
"0","      } else if (og == length(rgns) & dn > 1) { # If bottom plot"
"0","        # Include provincia names on x-axis"
"0","        p = p + theme(axis.title.x = element_blank(),"
"0","                      axis.title.y = element_blank(),"
"0","                      axis.text.y  = element_blank())"
"0","      } else { # If plot not on left of bottom edges of multiplot"
"0","        # Remove provincia names"
"0","        p = p + theme(axis.title.x = element_blank(),"
"0","                      axis.title.y = element_blank(),"
"0","                      axis.text.x  = element_blank(),"
"0","                      axis.text.y  = element_blank())"
"0","      }"
"0","      "
"0","      # Add ggplot to plot list"
"0","      pl[[i]] = p"
"0","      "
"0","    }"
"0","    "
"0","  }"
"0","  "
"0","  # Return list of plots"
"0","  return(pl)"
"0","}"
"2","Error: Incomplete expression: df = od_df
ylower = ""Origin County""
xlower = ""Destination County""
yupper = ""Origin Region""
xupper = ""Destination Region""
values = ""Migration""
rm_diag = F
bins = 15

#' @title hhm
#'
#' @description Creates a labelled heatmap for heirarchical data.
#'
#' @param df A data.frame with containing values with which to populate the heatmap. 
#' The data.frame must nclude columns specifying the lower categories (ylower, 
#' xlower) and upper groups (yupper, xupper) that each value corresponds to. These 
#' categories and groups will be used to arrange and label the rows and columns of 
#' the heatmap.
#' @param ylower A column in `df` containing the categories that will be presented 
#' as rows along the y-axis of the heatmap.
#' @param xlower A column in `df` containing the categories that will be presented 
#' as columns along the x-axis of the heatmap.
#' @param yupper A column in `df` containing the groupings that will be used to 
#' arrange the heatmap rows.
"

"0","#' @title log_seq"
"0","#'"
"0","#' @description Creates a vector of logarithmicly increasing values between 0 and a specified value `n`."
"0","#' If `n` is specified as 1, the vector will be scaled to between 0 and 1."
"0","#'"
"0","#' @param n The maximum value that the values in the sequence are scaled to."
"0","#' @param ln How many colour gradients to use in the legend (defaults to 15)."
"0","#' @param round_values Option to round values to whole numbers (defaults to `TRUE`)."
"0","#' @param rmv_extremes Option to remove zero and the maximum value (i.e. `n`) from the beginning "
"0","#' and the end of the returned vector (defaults to `FALSE`). Note that this will mean the length"
"0","#' of the returned vector will be `n` - 2."
"0","#'"
"0","#' @return A vector containing of logarithmicly increasing values between 1 and a specified value `n`."
"0","#' "
"0","#' @examples"
"0","#' # Create sequence of length 20, scaled between 1 and 500"
"0","#' log_seq(500,20)"
"0","#' "
"0","#' # Create sequence of length 15, scaled between 0 and 1"
"0","#' log_seq(1,12)"
"0","#' "
"0","#' @export"
"0","#' @importFrom dplyr ""%>%"""
"0","log_seq = function(n,ln=15,round_values=T,rmv_extremes=F) {"
"0",""
"0","  # Create a sequence from 1 to n. "
"0","  # If `n` is specified as 1, the vector will be scaled to between 0 and 1."
"0","  if (n == 1) {"
"0","    seq = seq(1, 1000, length.out = ln)"
"0","    round_values = F"
"0","  } else {"
"0","    seq = seq(1, n, length.out = ln-1)"
"0","  }"
"0","  "
"0","  # Apply the logarithm to the sequence"
"0","  log_seq = log(seq)"
"0","  "
"0","  # Scale the sequence to the range [0, 1]"
"0","  min_val = min(log_seq)"
"0","  max_val = max(log_seq)"
"0","  one_seq = ((log_seq - min_val) / (max_val - min_val))"
"0","  "
"0","  # Reverse pattern of scale so breaks are focussed on lower rather than upper end of scale"
"0","  one_seq_rev = one_seq %>% {. - max(.)} %>% {. * -1} %>% rev()"
"0","  "
"0","  # Scale sequence to n"
"0","  if (round_values) { "
"0","    scaled_one_seq = one_seq_rev %>% {. * n} %>% round() %>% .[2:length(.)] %>% c(0,1,.)"
"0","  } else if (n == 1) {"
"0","    scaled_one_seq = one_seq_rev"
"0","  } else {"
"0","    scaled_one_seq = one_seq_rev %>% {. * n} %>% .[2:length(.)] %>% c(0,.Machine$double.xmin,.)"
"0","  }"
"0","  "
"0","  # Option to remove zero and the maximum value (i.e. `n`) from the beginning and the end of the vector"
"0","  if (rmv_extremes) {"
"0","    scaled_one_seq = scaled_one_seq %>% .[2:(length(.)-1)]"
"0","  }"
"0","  "
"0","  # Return scaled sequence"
"0","  return(scaled_one_seq)"
"0","}"

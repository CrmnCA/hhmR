"0","#' @title hhm"
"0","#'"
"0","#' @description Creates a labelled heatmap from heirarchical data. This function is"
"0","#' useful if you wish to create a heatmap where the categories shown on both the x"
"0","#' and y axis can be grouped in some way. This heatmap will order the categories by"
"0","#' their assigned group and present both the categories and group labels along the "
"0","#' axes. An example might be series of smaller geographies (lower categories) which "
"0","#' aggregate into larger geographical regions (upper groups)."
"0","#' "
"0","#' @param df A data.frame with containing values with which to populate the heatmap. "
"0","#' The data.frame must include columns specifying the lower categories (ylower, "
"0","#' xlower) and upper groups (yupper, xupper) that each value corresponds to. These "
"0","#' categories and groups will be used to arrange and label the rows and columns of "
"0","#' the heatmap. Note that the groups will by default be arranged alphabetically"
"0","#' (top to bottom / left to right). The ordering of the groups can be manually "
"0","#' specified by converting yupper and/or xupper to factors. In this case, the "
"0","#' groups will be ordered based on the ordering of the factor levels."
"0","#' @param ylower A column in `df` containing the categories that will be presented "
"0","#' as rows along the y-axis of the heatmap."
"0","#' @param xlower A column in `df` containing the categories that will be presented "
"0","#' as columns along the x-axis of the heatmap."
"0","#' @param yupper A column in `df` containing the groupings that will be used to "
"0","#' arrange the heatmap rows."
"0","#' @param xupper A column in `df` containing the groupings that will be used to "
"0","#' arrange the heatmap columns."
"0","#' @param values A column in `df` containing the values used to populate the "
"0","#' heatmap."
"0","#' @param rm_diag Do not show values for categories along the x and y axes that "
"0","#' are identical (defaults to `FALSE`). This is particularly useful for "
"0","#' origin-destination heatmaps, where the user may want to hide the diagonal "
"0","#' values."
"0","#' @param lgttl Option to manually define legend title."
"0","#' @param bins Option to break the data into a specified number of groups "
"0","#' (defaults to `NULL`). The thresholds between these groups will be equally "
"0","#' spaced between the minimum and maximum values observed in `values`."
"0","#' @param cbrks Vector of custom breaks, if users wish to use a discrete legend "
"0","#' colour scheme (defaults to `NULL`). For example, a supplied vector of `c(5,10,"
"0","#' 20)` would break he values up into 5 ordered groups of ranges 0, 0-5, 5-10,"
"0","#' 10-20 and 20+."
"0","#' @param cclrs Vector of hexcodes, which to create a custom legend colour scheme "
"0","#' (defaults to `NULL`). If `cbrks` is supplied, `cclrs` must have a length "
"0","#' two longer than `cbrks`. If `bins` is supplied, `cclrs` must have a length "
"0","#' equal to the values provided to `bins`."
"0","#' @param norm_lgd Normalised to between 0 and 1 in legend (defaults to `FALSE`)."
"0","#' Allows for consistency when comparing heatmaps across different datasets. At "
"0","#' present, this only works all heatmap values are positive."
"0","#' @param lgdps If using custom breaks, define the number of decimal points to "
"0","#' round the legend scale to (defaults to 0). If `norm_lgd` is `TRUE`, it will "
"0","#' default to 3."
"0","#' @param xttl_height The space allocated to the group titles on the x-axis as a"
"0","#' proportion of the heatmap's height (defaults to 0.15)."
"0","#' @param yttl_width The space allocated to the group titles on the y-axis as a"
"0","#' proportion of the heatmap's width (defaults to 0.15)."
"0","#'"
"0","#' @return A ggplot object containing the final heatmap."
"0","#' "
"0","#' @examples"
"0","#' # CREATE TOY DATA OF INTERNAL MIGRATION BETWEEN COUNTIES (LOWER LEVEL) AND REGIONS (UPPER LEVEL)"
"0","#' "
"0","#' # Define names of fake counties"
"0","#' fake_counties = c(""Greenridge"",""Windermoor"",""Bramblewood"",""Silverlake"",""Thornbury"",""Maplewood"","
"0","#'                   ""Hawthorne"",""Pinehurst"",""Riverton"",""Meadowbrook"",""Fairhaven"",""Oakdale"",""Stonebridge"","
"0","#'                   ""Brookfield"",""Ashford"",""Glenville"",""Sunnyvale"",""Westfield"")"
"0","#' "
"0","#' # Create region county lookup tables"
"0","#' rc_lkp = data.frame(region = c(rep(""North"",3),rep(""Midlands"",5),rep(""South West"",4),rep(""South East"",6)), county = fake_counties)"
"0","#' og_lkp = rc_lkp %>% setNames(c(""Origin Region""     ,""Origin County""     ))"
"0","#' dn_lkp = rc_lkp %>% setNames(c(""Destination Region"",""Destination County""))"
"0","#' "
"0","#' # Create dataframe of fake migration data"
"0","#' set.seed(1234)"
"0","#' od_df = expand.grid(fake_counties,fake_counties) %>% setNames(paste(c(""Origin"",""Destination""),""County"",sep="" "")) %>% full_join(og_lkp) %>% full_join(dn_lkp) %>% "
"0","#'         mutate(Migration = (1/rgamma(18*18, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round())"
"0","#' od_df[od_df$`Origin County` == od_df$`Destination County`,""Migration""] = od_df[od_df$`Origin County` == od_df$`Destination County`,""Migration""] * 10"
"0","#' "
"0","#' "
"0","#' "
"0","#' # RUN FUNCTION"
"0","#' "
"0","#' # Intial heatmap"
"0","#' hierarchical_heatmap = hhm(df = od_df, "
"0","#'                            ylower = ""Origin County"", "
"0","#'                            xlower = ""Destination County"", "
"0","#'                            yupper = ""Origin Region"", "
"0","#'                            xupper = ""Destination Region"", "
"0","#'                            values = ""Migration"", "
"0","#'                            yttl_width = 0.22, "
"0","#'                            xttl_height = 0.4)"
"0","#' "
"0","#' # View result"
"0","#' hierarchical_heatmap"
"0","#' "
"0","#' # Remove diagonal from heatmap (i.e. hide static populations)"
"0","#' removed_diag         = hhm(df = od_df, "
"0","#'                            ylower = ""Origin County"", "
"0","#'                            xlower = ""Destination County"", "
"0","#'                            yupper = ""Origin Region"", "
"0","#'                            xupper = ""Destination Region"", "
"0","#'                            values = ""Migration"", "
"0","#'                            yttl_width = 0.22, "
"0","#'                            xttl_height = 0.4, "
"0","#'                            rm_diag = T)"
"0","#' "
"0","#' # Vuew result"
"0","#' removed_diag"
"0","#' "
"0","#' # Nomalise the legend"
"0","#' normalised_lgd       = hhm(df = od_df, "
"0","#'                            ylower = ""Origin County"", "
"0","#'                            xlower = ""Destination County"", "
"0","#'                            yupper = ""Origin Region"", "
"0","#'                            xupper = ""Destination Region"", "
"0","#'                            values = ""Migration"", "
"0","#'                            yttl_width = 0.22, "
"0","#'                            xttl_height = 0.4, "
"0","#'                            rm_diag = T,"
"0","#'                            norm_lgd = T)"
"0","#' "
"0","#' # View result"
"0","#' normalised_lgd"
"0","#' "
"0","#' # Manually define colour scheme for heatmap (uses viridis colour scheme)"
"0","#' viridis_12 = c(""#440154FF"",""#482173FF"",""#433E85FF"",""#38598CFF"",""#2D708EFF"",""#25858EFF"",""#1E9B8AFF"",""#2BB07FFF"",""#51C56AFF"",""#85D54AFF"",""#C2DF23FF"",""#FDE725FF"")"
"0","#' "
"0","#' # Assign continuous colour scheme"
"0","#' cont_clrs            = hhm(df = od_df, "
"0","#'                            ylower = ""Origin County"", "
"0","#'                            xlower = ""Destination County"", "
"0","#'                            yupper = ""Origin Region"", "
"0","#'                            xupper = ""Destination Region"", "
"0","#'                            values = ""Migration"", "
"0","#'                            yttl_width = 0.22, "
"0","#'                            xttl_height = 0.4, "
"0","#'                            rm_diag = T,"
"0","#'                            norm_lgd = T,"
"0","#'                            cclrs = viridis_12)"
"0","#' "
"0","#' # View result"
"0","#' cont_clrs"
"0","#' "
"0","#' # Break legends into a specified number of bins (of equal intervals between 0 and the maximum value in `values`)"
"0","#' bins_15              = hhm(df = od_df, "
"0","#'                            ylower = ""Origin County"", "
"0","#'                            xlower = ""Destination County"", "
"0","#'                            yupper = ""Origin Region"", "
"0","#'                            xupper = ""Destination Region"", "
"0","#'                            values = ""Migration"", "
"0","#'                            yttl_width = 0.22, "
"0","#'                            xttl_height = 0.4, "
"0","#'                            rm_diag = T,"
"0","#'                            bins = 15)"
"0","#' "
"0","#' # View result"
"0","#' bins_15"
"0","#' "
"0","#' # Create breaks to view data using a categoric scale."
"0","#' # In this instance, the `hhmR` function `log_seq` has been used to create a vector of logarithmicly increasing values between 1 and "
"0","#' # the maximum value in the dataset not on the diagonal."
"0","#' cbrks = log_seq(od_df %>% filter(`Origin County` != `Destination County`) %>% .$Migration %>% max(), 12, rmv_extremes = T)"
"0","#' "
"0","#' # Manually assign legend categories"
"0","#' legend_cats          = hhm(df = od_df, "
"0","#'                            ylower = ""Origin County"", "
"0","#'                            xlower = ""Destination County"", "
"0","#'                            yupper = ""Origin Region"", "
"0","#'                            xupper = ""Destination Region"", "
"0","#'                            values = ""Migration"", "
"0","#'                            yttl_width = 0.22, "
"0","#'                            xttl_height = 0.4, "
"0","#'                            rm_diag = T,"
"0","#'                            cbrks = cbrks)"
"0","#' "
"0","#' # View result"
"0","#' legend_cats"
"0","#' "
"0","#' # Manually assign colours to legend categories"
"0","#' cat_clrs             = hhm(df = od_df, "
"0","#'                            ylower = ""Origin County"", "
"0","#'                            xlower = ""Destination County"", "
"0","#'                            yupper = ""Origin Region"", "
"0","#'                            xupper = ""Destination Region"", "
"0","#'                            values = ""Migration"", "
"0","#'                            yttl_width = 0.22, "
"0","#'                            xttl_height = 0.4, "
"0","#'                            rm_diag = T,"
"0","#'                            cbrks = cbrks,"
"0","#'                            cclrs = viridis_12)"
"0","#' "
"0","#' # View result"
"0","#' cat_clrs"
"0","#' @export"
"0","#' @importFrom dplyr ""%>%"""
"0","#' @importFrom rlang sym"
"0",""
"0","df = example_migration"
"0","ylower = ""Origin County"""
"0","xlower = ""Destination County"""
"0","yupper = ""Origin Region"""
"0","xupper = ""Destination Region"""
"0","values = ""Migration"""
"0","yttl_width = 0.22"
"0","xttl_height = 0.4"
"0","rm_diag=F"
"0","lgttl=NULL"
"0","bins=15"
"0","cbrks=NULL"
"0","cclrs=NULL"
"0","norm_lgd=F"
"0","lgdps=0"
"0",""
"0","#df = od_df"
"0","#ylower = ""Origin County"""
"0","#xlower = ""Destination County"""
"0","#yupper = ""Origin Region"""
"0","#xupper = ""Destination Region"""
"0","#values = ""Migration"""
"0","#rm_diag = T"
"0","#lgttl=NULL"
"0","#bins=NULL"
"0","#cbrks=seq(0,1,length.out=12) %>% .[2:(length(.)-1)]#od_df %>% filter(`Origin County` != `Destination County`) %>% .$Migration %>% range() %>% {seq(from = .[1], to = .[2], length.out = 10)} %>% round() %>% .[1:(length(.)-1)] #%>% {. / 68}"
"0","#cclrs=NULL"
"0","#norm_lgd=T"
"0","#lgdps=0"
"0","#yttl_width = 0.22"
"0","#xttl_height = 0.4"
"0",""
"0","hhm = function(df,ylower,yupper,xlower,xupper,values,rm_diag=F,lgttl=NULL,bins=NULL,cbrks=NULL,cclrs=NULL,norm_lgd=F,lgdps=0,xttl_height=0.15,yttl_width=0.15) {"
"0","  "
"0","  # Define max value supplied to `values`"
"0","  if (rm_diag) {"
"0","    max_value = max(df[df[[xlower]] != df[[ylower]],values], na.rm = T)"
"0","  } else {"
"0","    max_value = max(df[[values]], na.rm = T)"
"0","  }"
"0","  "
"0","  # Check that supplied model inputs are compatible and won't cause errors"
"0","  if (!is.null(bins) && !is.null(cbrks)) { stop(""The inputs bins and cbrks should not be supplied at the same time."
"0","bins is used to break the data into a specific number of groups with equal intervals between the min and max values."
"0","cbrks is used to manually break the data into groups based on the supplied thresholds."
"0","Please provide either one or the other."") }"
"0","  if (!is.null(bins) && !is.null(cclrs)) {"
"0","    if (bins != length(cclrs)) { stop(""If both bins and cclrs are provideds, bins and cclrs must both be vectors with cclrs having a length equal to the value of bins."") }"
"0","  }"
"0","  if (!is.null(cbrks) && rm_diag) {"
"0","    if ( (min(cbrks) <= 0) || (max(cbrks) >= max_value) ) { stop(paste0(""All values in cbrks must be between 0 and the largest value provided to `values`."
"0","In this instance rm_diag == T, so only values not on the diagonal are considered."
"0","All values provided to cbrks should therefore be between greater than 0 and less than "",max_value,""."")) }"
"0","  }"
"0","  if (!is.null(cbrks) && rm_diag == F) {"
"0","    if ( !is.null(cbrks) && (min(cbrks) <= 0) || (max(cbrks) >= max_value) ) { stop(paste0(""All values in cbrks must be between 0 and the largest value provided to `values`."
"0","In this instance all values provided to cbrks should therefore be between greater than 0 and less than "",max_value,""."")) }"
"0","  }"
"0","  if (!is.null(cbrks) && !is.null(cclrs)) {"
"0","    if ( length(cbrks) != (length(cclrs)-2) ) { stop(""If both cbrks and cclrs are provided, cbrks and cclrs must both be vectors with cclrs having a length two longer than cbrks."") }"
"0","  }"
"0","  if (!is.null(cbrks) && norm_lgd) {"
"0","    if (min(range(cbrks)) <  0 || max(range(cbrks)) > 1) { stop(""If normalising the values (norm_lgd == T), all breaks provided to cbrks must be between 0 and 1."") }"
"0","  }"
"0","  if (cbrks %>% diff() %>% {. <= 0} %>% sum() %>% {. > 0}) { stop(""Please ensure the values in cbrks are provided in ascending order."") }"
"0","  "
"0","  # Remove unwanted rows and format origin so geographies appear in alphabetical order"
"0","  df = df[,c(ylower,xlower,yupper,xupper,values)]"
"0","  "
"0","  # Define the groups to be shown along the x and y axes"
"0","  # If ordering of groups already defined via factor ordering, take this as the order "
"0","  # the groups should appear (top to bottom / left to right). # Otherwise, order groups alphabetically"
"0","  if (!is.null(df[[xupper]] %>% levels())) {"
"0","    xgrps = df[[xupper]] %>% levels()"
"0","  } else { "
"0","    xgrps = df[[xupper]] %>% unique() %>% sort()"
"0","  }"
"0","  if (!is.null(df[[yupper]] %>% levels())) {"
"0","    ygrps = df[[yupper]] %>% levels()"
"0","  } else { "
"0","    ygrps = df[[yupper]] %>% unique() %>% sort()"
"0","  }"
"0","  "
"0","  # If user specified to remove diagonal values, set all observations where ylower and xlower are identical to zero"
"0","  if (rm_diag) {"
"0","    df[df[[ylower]] == df[[xlower]],values] = NA"
"0","  }"
"0","  "
"0","  # Option to normalise values between 0-1 (only works if all values are positive)"
"0","  if (norm_lgd) {"
"0","    "
"0","    # If any values are negative, return error message"
"0","    if ((df[[values]] < 0) %>% sum(na.rm = T) %>% {. > 0}) {stop(""norm_lgd is only designed to be used if all values used to populate the heatmap are positive."")}"
"0","    "
"0","    # Otherwise normalise values"
"0","    df[[values]] = df[[values]] / max(df[[values]], na.rm = T)"
"0","    "
"0","    # Unless a value other than zero is supplied (i.e. the user has manually specified a non-default value), set the number of decimal points shown in the legend to 3"
"0","    if (lgdps == 0) {"
"0","      lgdps = 3"
"0","    }"
"0","  }"
"0","  "
"0","  # Option to split legend into custom categories"
"0","  if (!is.null(cbrks)) { # If cbrks provided"
"0","    "
"0","    # Add the smallest value possible in R as a lower threshold to cbrks. "
"0","    # This ensures anything that is equal to, or less than, zero is included in the first group."
"0","    cbrks = c(.Machine$double.xmin,cbrks)"
"0","    "
"0","    # Define names of custom breaks"
"0","    if (lgdps == 0) {"
"0","      brk_nms = c(0, paste(cbrks %>% .[2:length(.)] %>% c(0,.        ), "
"0","                           cbrks %>% .[2:length(.)] %>% c(.,max_value), "
"0","                           sep = ""-""))"
"0","    } else if (norm_lgd) {"
"0","      brk_nms = c(0, paste(cbrks %>% .[2:length(.)] %>% c(0,.        ) %>% sprintf(fmt = paste0('%#.',lgdps,'f')), "
"0","                           cbrks %>% .[2:length(.)] %>% c(.,1        ) %>% sprintf(fmt = paste0('%#.',lgdps,'f')), "
"0","                           sep = ""-""))"
"0","    } else {"
"0","      brk_nms = c(0, paste(cbrks %>% .[2:length(.)] %>% c(0,.        ) %>% sprintf(fmt = paste0('%#.',lgdps,'f')), "
"0","                           cbrks %>% .[2:length(.)] %>% c(.,max_value) %>% sprintf(fmt = paste0('%#.',lgdps,'f')), "
"0","                           sep = ""-""))"
"0","    }"
"0","  "
"0","    # Create discrete scale based on these custom breaks"
"0","    df[[values]] = df[[values]] %>% findInterval(cbrks) %>% {. + 1} %>% addNA() %>% "
"0","                                    factor(levels = 1:length(brk_nms), labels = brk_nms)"
"0","    "
"0","  } else if (!is.null(bins)) { # If bins provided"
"0","    "
"0","    # Assign breaks to be equidistant thresholds between the minimum and maximum observed values"
"0","    # Also add the minimum possible value above zero as the first break in the sequence"
"0","    cbrks = seq(min(df[[values]], na.rm = T), max(df[[values]], na.rm = T), length.out = bins - 1) %>% .[1:(length(.)-1)] %>% c(.Machine$double.xmin,.)"
"0","    "
"0","    # Define names of custom breaks"
"0","    if (lgdps == 0) { # If set to show whole numbers"
"0","      # Round all values other than the first one (which is the minimum possible value above zero), up to the nearest whole number"
"0","      cbrks = c(.Machine$double.xmin, cbrks %>% .[2:length(.)] %>% ceiling())"
"0","      # Assign break names between zero and the maximum observed value in the data"
"0","      brk_nms = c(0, paste(cbrks %>% .[2:length(.)] %>% c(0,.        ), "
"0","                           cbrks %>% .[2:length(.)] %>% c(.,max_value), "
"0","                           sep = ""-""))"
"0","    } else if (norm_lgd) { # If data has been normalised"
"0","      # Assign break names between 0 and 1 to the specified number of decimal points (lgdps)"
"0","      brk_nms = c(0, paste(cbrks %>% .[2:length(.)] %>% c(0,.        ) %>% sprintf(fmt = paste0('%#.',lgdps,'f')), "
"0","                           cbrks %>% .[2:length(.)] %>% c(.,1        ) %>% sprintf(fmt = paste0('%#.',lgdps,'f')), "
"0","                           sep = ""-""))"
"0","    } else { # If using non-rounded, non-normalised data"
"0","      # Assign break names between zero and the maximum observed value in the data to the specified number of decimal points (lgdps)"
"0","      brk_nms = c(0, paste(cbrks %>% .[2:length(.)] %>% c(0,.        ) %>% sprintf(fmt = paste0('%#.',lgdps,'f')), "
"0","                           cbrks %>% .[2:length(.)] %>% c(.,max_value) %>% sprintf(fmt = paste0('%#.',lgdps,'f')), "
"0","                           sep = ""-""))"
"0","    }"
"0","  "
"0","    # Create discrete scale based on these custom breaks"
"0","    df[[values]] = df[[values]] %>% findInterval(cbrks) %>% "
"0","                                    replace(. == length(cbrks), (length(cbrks)-.Machine$double.xmin)) %>% "
"0","                                    {. + 1} %>% addNA() %>% "
"0","                                    factor(levels = 1:length(brk_nms), labels = brk_nms)"
"0","    "
"0","  } else { # Otherwise define consistent legend scale range"
"0","    lg_lims = df[[values]] %>% range(na.rm = T)"
"0","  }"
"0","  "
"0","  # Define legend title (if not defined by user)"
"0","  if (is.null(lgttl) && norm_lgd) {"
"0","    lgttl = ""Normalised\nValues"""
"0","  } else if (is.null(lgttl) && norm_lgd == F) {"
"0","    lgttl = ""Values"""
"0","  }"
"0","  "
"0","  # Create empty list to populate with ggplot heatmaps"
"0","  pl = list()"
"0","  "
"0","  # Define vectors capturing the number of lower categories in each upper group"
"0","  xglns = df %>% group_split(!!rlang::sym(xupper)) %>% map(~ .[[xlower]] %>% unique() %>% length()) %>% unlist()"
"0","  yglns = df %>% group_split(!!rlang::sym(yupper)) %>% map(~ .[[ylower]] %>% unique() %>% length()) %>% unlist()"
"0","  "
"0","  # Counter to keep track of interations of nested for loop"
"0","  i = 0"
"0","  "
"0","  # For each y-axis group"
"0","  for (ygrp in 1:length(ygrps)) {"
"0","    "
"0","    # For each x-axis group"
"0","    for (xgrp in 1:length(xgrps)) {"
"0","      "
"0","      # Increase interature counter by 1"
"0","      i = i + 1"
"0","      "
"0","      # Filter group-level migration data to only include origin and destination regions of interest"
"0","      sdf = df[df[[yupper]] == ygrps[ygrp] & df[[xupper]] == xgrps[xgrp],]"
"0","      "
"0","      # Order lower categories alphabetically"
"0","      sdf[[xlower]] = factor(sdf[[xlower]], levels = sdf[[xlower]] %>% unique() %>% sort()           )"
"0","      sdf[[ylower]] = factor(sdf[[ylower]], levels = sdf[[ylower]] %>% unique() %>% sort() %>% rev() )"
"0","      "
"0","      # Define main plot"
"0","      p = ggplot(sdf, aes(.data[[xlower]], .data[[ylower]])) +"
"0","        geom_tile(aes(fill = .data[[values]]), show.legend = T) +"
"0","        theme(plot.margin = unit(rep(0,4), ""cm""),"
"0","              axis.text.x  = element_text(angle = 90, hjust = 1.0, vjust = 0.3),"
"0","              axis.title.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5),"
"0","              axis.title.y = element_text(angle =  0, hjust = 0.5, vjust = 0.5),"
"0","              axis.ticks   = element_blank()) +"
"0","        labs(x = xgrps[xgrp], y = ygrps[ygrp])"
"0","      "
"0","      # Define colour scale"
"0","      if (!is.null(cbrks) && !is.null(cclrs)) {"
"0","        p = p + scale_fill_manual(name = lgttl, values = cclrs                                  , drop = F, na.value = ""white"")"
"0","      } else if (!is.null(cbrks) && is.null(cclrs)) {"
"0","        p = p + scale_fill_manual(name = lgttl, values = cg(""white"",""#08306B"",(length(cbrks)+1)), drop = F, na.value = ""white"")"
"0","      } else if (is.null(cbrks) && !is.null(cclrs) && norm_lgd) {"
"0","        p = p + scale_fill_gradientn(name = lgttl, colours = cclrs                , limits = c(0,1) , na.value = ""white"")"
"0","      } else if (is.null(cbrks) && !is.null(cclrs) && norm_lgd == F) {"
"0","        p = p + scale_fill_gradientn(name = lgttl, colours = cclrs                , limits = lg_lims, na.value = ""white"")"
"0","      } else if (is.null(cbrks) && is.null(cclrs) && norm_lgd) {"
"0","        p = p + scale_fill_gradientn(name = lgttl, colours = cg(""white"",""#08306B""), limits = c(0,1) , na.value = ""white"")"
"0","      } else if (is.null(cbrks) && is.null(cclrs) && norm_lgd == F) {"
"0","        p = p + scale_fill_gradientn(name = lgttl, colours = cg(""white"",""#08306B""), limits = lg_lims, na.value = ""white"")"
"0","      }"
"0","      "
"0","      # To prevent legend showing NA values if rm_diag set to TRUE (in which case, diagonal set to NA), only show legend for plots that are not on the diagonal"
"0","      if (rm_diag && (sdf[[values]] %>% is.na() %>% sum() %>% {. > 0}) && (ygrp == xgrp) ) {"
"0","        p = p + theme(legend.position = ""none"")"
"0","      }"
"0","      "
"0","      # If bottom-left plot"
"0","      if (ygrp == length(ygrps) & xgrp == 1) {"
"0","        # Include provincia names on both axes"
"0","        p = p + theme(axis.title.x = element_blank(),"
"0","                      axis.title.y = element_blank())"
"0","      } else if (ygrp < length(ygrps) & xgrp == 1) { # If left-hand plot"
"0","        # Include provincia names on y-axis"
"0","        p = p + theme(axis.title.x = element_blank(),"
"0","                      axis.title.y = element_blank(),"
"0","                      axis.text.x  = element_blank())"
"0","      } else if (ygrp == length(ygrps) & xgrp > 1) { # If bottom plot"
"0","        # Include provincia names on x-axis"
"0","        p = p + theme(axis.title.x = element_blank(),"
"0","                      axis.title.y = element_blank(),"
"0","                      axis.text.y  = element_blank())"
"0","      } else { # If plot not on left of bottom edges of multiplot"
"0","        # Remove provincia names"
"0","        p = p + theme(axis.title.x = element_blank(),"
"0","                      axis.title.y = element_blank(),"
"0","                      axis.text.x  = element_blank(),"
"0","                      axis.text.y  = element_blank())"
"0","      }"
"0","      "
"0","      # Add ggplot to plot list"
"0","      pl[[i]] = p"
"0","      "
"0","    }"
"0","    "
"0","  }"
"0","  "
"0","  # Define plot heights and widths (including group titles)"
"0","  wds = c((sum(xglns)*yttl_width),xglns)"
"0","  hts = c(yglns,(sum(yglns)*xttl_height))"
"0","  "
"0","  # Define plot spacer"
"0","  ps = plot_spacer()"
"0","  "
"0","  # Create empty lists to be populated with plot titles"
"0","  xttls = list()"
"0","  yttls = list()"
"0","  "
"0","  # Define plot titles"
"0","  for (xgrp in 1:length(xgrps)) {"
"0","    xttls[[xgrp]] = plt_ttl(xgrps[xgrp])"
"0","  }"
"0","  for (ygrp in 1:length(ygrps)) {"
"0","    yttls[[ygrp]] = plt_ttl(ygrps[ygrp],axs=""y"")"
"0","  }"
"0","  "
"0","  # Create empty list to populate with both plot title and heatmap tiles in the correct order"
"0","  plts = list()"
"0","  "
"0","  # Define counters for subsetting plot title and heatmap lists, to ensure they are ordered correctly"
"0","  i = 1"
"0","  j = 1"
"0","  "
"0","  # For each group (row), assign each plot title, then the heatmap tiles within that row to plts list"
"0","  for (ygrp in 1:length(yttls)) {"
"0","    "
"0","    # Add plot title to list"
"0","    plts[[i]] = yttls[[ygrp]]"
"0","    "
"0","    # Add heatmap plots to list"
"0","    plts[(i+1):(i+length(xttls))] = pl[j:(j+length(xttls)-1)]"
"0","    "
"0","    # Adjust counters"
"0","    i = i + 1 + length(xttls)"
"0","    j = j +     length(xttls)"
"0","  }"
"0","  "
"0","  # Add x-axis plots"
"0","  plts[[length(plts)+1]] = ps"
"0","  plts[(length(plts)+1):(length(plts)+length(xttls))] = xttls"
"0","  "
"0","  # Define final plot"
"0","  plt = patchwork::wrap_plots(plts, widths = wds, heights = hts, guides = ""collect"")"
"0",""
"0","  # Return final plot"
"0","  return(plt)"
"0","}"

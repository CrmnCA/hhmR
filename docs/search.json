[{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"hhmR allows users create high-quality heatmaps labelled, hierarchical data. Specifically, data two-level hierarchical structure, produce heatmap row column represents category lower level. rows columns grouped higher-level group category belongs , names category groups shown margins. packages (e.g. dendextend) allow heatmap rows columns arranged groups, believe R package also labels data levels - .e. category group names shown along left bottom margins.","code":""},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"hierarchical-heatmaps-hhm","dir":"Articles","previous_headings":"","what":"Hierarchical Heatmaps (hhm)","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"main function within package hhm. function useful wish create heatmap categories shown x y axis can grouped way. heatmap order categories assigned group present categories group labels along axes. illustrate function can used, use internal migration data fake country (example_migration). country made regions, region containing multiple counties. hierachical structure summarised : dataset contains information number people moved counties / regions given period time. contains five columns: Origin County (Origin Region within), Destination County (Destination Region within), number people migrated origin destination counties observation period (Migration).","code":"# Import dplyr for data cleaning library(dplyr)  # Summarise hierarchical data structure example_migration %>% group_by(`Origin Region`) %>%                        reframe(`Origin County` = unique(`Origin County`)) %>%                        setNames(c(\"Region\",\"County\")) #> # A tibble: 18 × 2 #>    Region     County      #>    <chr>      <chr>       #>  1 Midlands   Silverlake  #>  2 Midlands   Thornbury   #>  3 Midlands   Maplewood   #>  4 Midlands   Hawthorne   #>  5 Midlands   Pinehurst   #>  6 North      Greenridge  #>  7 North      Windermoor  #>  8 North      Bramblewood #>  9 South East Stonebridge #> 10 South East Brookfield  #> 11 South East Ashford     #> 12 South East Glenville   #> 13 South East Sunnyvale   #> 14 South East Westfield   #> 15 South West Riverton    #> 16 South West Meadowbrook #> 17 South West Fairhaven   #> 18 South West Oakdale # Show data head(example_migration) #>   Origin County Destination County Origin Region Destination Region Migration #> 1    Greenridge         Greenridge         North              North       420 #> 2    Windermoor         Greenridge         North              North        28 #> 3   Bramblewood         Greenridge         North              North        28 #> 4    Silverlake         Greenridge      Midlands              North        37 #> 5     Thornbury         Greenridge      Midlands              North        27 #> 6     Maplewood         Greenridge      Midlands              North        35"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"initial-heatmap","dir":"Articles","previous_headings":"Hierarchical Heatmaps (hhm)","what":"Initial Heatmap","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"useful way visualising migration data using migration matrix heatmap. However, data hierarchical, also useful show migrants moved regions within figure. hhm function can useful. can create heatmap shows number migrants moved different counties, rows columns ordered labelled region. run function, Origin County Destination County provided lower-level categories shown along y x axes respectively (.e. ylower xlower). Additionally, Origin Region Destination Region provided upper-level groups via rows columns ordered (.e. yupper xupper). Finally, Migration provides values populate heatmap, yttl_width xttl_height used ensure enough space region names shown correctly.","code":"# Create Intial heatmap hierarchical_heatmap = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.22)  # View result hierarchical_heatmap"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"remove-diagonal","dir":"Articles","previous_headings":"Hierarchical Heatmaps (hhm)","what":"Remove diagonal","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"example, darkest colours shown along diagonal. , across given period time, majority population migrate, meaning origin destination counties . order focus people moved different counties, can remove diagonal setting rm_diag TRUE.","code":"# Remove diagonal from heatmap (i.e. hide static populations) removed_diag         = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.22,                            rm_diag = TRUE)  # View result removed_diag"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"normalise-legend","dir":"Articles","previous_headings":"Hierarchical Heatmaps (hhm)","what":"Normalise legend","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"Sometimes can useful normalise values within heatmap, different datasets can compared using legend. can easily done setting norm_lgd TRUE.","code":"# Nomalise the legend normalised_lgd       = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.22,                            rm_diag = TRUE,                            norm_lgd = TRUE)  # View result normalised_lgd"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"manually-define-continuous-colour-scheme","dir":"Articles","previous_headings":"Hierarchical Heatmaps (hhm)","what":"Manually define continuous colour scheme","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"default colour scheme fades blue white. However, legend colour scheme can define manually passing vector hexcodes argument cclrs. example, viridis colour scheme provided.","code":"# Manually define colour scheme for heatmap (uses viridis colour scheme) viridis_12 = c(\"#440154FF\",\"#482173FF\",\"#433E85FF\",\"#38598CFF\",\"#2D708EFF\",\"#25858EFF\",                \"#1E9B8AFF\",\"#2BB07FFF\",\"#51C56AFF\",\"#85D54AFF\",\"#C2DF23FF\",\"#FDE725FF\")  # Assign continuous colour scheme cont_clrs            = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.22,                            rm_diag = TRUE,                            norm_lgd = TRUE,                            cclrs = viridis_12)  # View result cont_clrs"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"break-data-into-equal-interval-bins","dir":"Articles","previous_headings":"Hierarchical Heatmaps (hhm)","what":"Break data into equal interval bins","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"function also contains option break data specified number categories, based equal interval breaks 0 maximum value within dataset. can done passing number desired categories bins.","code":"# Break legends into a specified number of bins # (of equal intervals between 0 and the maximum value in `values`) bins_15              = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.22,                            rm_diag = TRUE,                            bins = 15)  # View result bins_15"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"manually-define-interval-breaks","dir":"Articles","previous_headings":"Hierarchical Heatmaps (hhm)","what":"Manually define interval breaks","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"times might desirable manually define intervals breaks categories. example, data highly skewed normally distributed equal interval breaks may inappropriate. Manual breaks can provided passing vector intervals cbrks. instance, hhmR function log_seq used create vector logarithmically increasing values 1 maximum value dataset (diagonal).","code":"# Manually break data into categories using user-specified intervals. cbrks = log_seq(example_migration[example_migration[[\"Origin County\"     ]] !=                                   example_migration[[\"Destination County\"]],] %>%                 .$Migration %>% max(), 12, rmv_extremes = TRUE)  # Show interval breaks cbrks #>  [1]  1  2  4  6  8 11 14 19 25 35 # Manually assign legend categories legend_cats          = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.22,                            rm_diag = TRUE,                            cbrks = cbrks)  # View result legend_cats"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"manually-assign-categoric-colours","dir":"Articles","previous_headings":"Hierarchical Heatmaps (hhm)","what":"Manually assign categoric colours","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"also possible manually define colour category passing vector hexcodes cclrs. length vector must two longer vector passed cbrks.","code":"# Manually assign colours to legend categories cat_clrs             = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.22,                            rm_diag = TRUE,                            cbrks = cbrks,                            cclrs = viridis_12)  # View result cat_clrs"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"time-series-heatmaps-tshhm","dir":"Articles","previous_headings":"","what":"Time-series heatmaps (tshhm)","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"Another common challenge hierarchical data visualising changes time. function tshhm design address . function useful wish create time-series heatmap categories shown y axis can grouped way. heatmap order categories assigned group present categories group labels along y-axis. illustrate , use immigration data 2011-2015 fake country previous example (example_time_series). country made regions, region containing counties shown. contains four columns: County (Region within), Year observation, number immigrants county recieved given year (Immigration).","code":"# Show data head(example_time_series) #> # A tibble: 6 × 4 #>   Region County      Year Immigration #>   <chr>  <chr>      <dbl>       <int> #> 1 North  Greenridge  2011        7452 #> 2 North  Greenridge  2012          NA #> 3 North  Greenridge  2013         298 #> 4 North  Greenridge  2014        8800 #> 5 North  Greenridge  2015        4265 #> 6 North  Windermoor  2011        8016"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"initial-heatmap-1","dir":"Articles","previous_headings":"Time-series heatmaps (tshhm)","what":"Initial Heatmap","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"run function, variable County provided lower-level categories (lower) shown along y-axis, variable Region provided upper-level groups (upper) order group heatmap rows. Additionally, Year provided time intervals shown along axis (times), Immigration provides values populate heatmap (values). Finally, yttl_width used ensure enough space region names shown correctly y-axis. Note NA values displayed blank.","code":"# Intial heatmap time_series_heatmap = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             yttl_width  = 0.25)  # View result time_series_heatmap"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"sort-rows-in-ascending-order","dir":"Articles","previous_headings":"Time-series heatmaps (tshhm)","what":"Sort rows in ascending order","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"can sometimes useful arrange rows ascending descending order, depending values within heatmap. parameter sum_ascend allows functionality arranging rows within group. default option alphabetical, orders rows alphabetical order top bottom. options include sum_ascend mean_ascend, order rows ascending order (top bottom) based row totals row means respectively. order can reversed options sum_descend mean_descend. Manually defining order upper-level groups (Region example) demonstrated end vignette.","code":"# Arrange counties within each region by total number of immigrants # across all five years (ascending from top to bottom) sort_ascending      = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             yttl_width  = 0.25)  # View result sort_ascending"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"normalise-legend-1","dir":"Articles","previous_headings":"Time-series heatmaps (tshhm)","what":"Normalise legend","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"Sometimes can useful normalise values within heatmap, different datasets can compared using legend. can easily done setting norm_lgd TRUE.","code":"# Nomalise the legend normalised_lgd      = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             norm_lgd = TRUE,                             yttl_width  = 0.25)  # View result normalised_lgd"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"manually-define-continuous-colour-scheme-1","dir":"Articles","previous_headings":"Time-series heatmaps (tshhm)","what":"Manually define continuous colour scheme","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"legend colour scheme can defined manually passing vector hexcodes argument cclrs. example, viridis colour scheme provided.","code":"# Assign continuous colour scheme cont_clrs           = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             norm_lgd = TRUE,                             cclrs = viridis_12,                             yttl_width  = 0.25)  # View result cont_clrs"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"assign-na-colours","dir":"Articles","previous_headings":"Time-series heatmaps (tshhm)","what":"Assign NA colours","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"can sometimes useful visually highlight cells data missing. can done passing hexcode argument na_colour. cause NA values within dataset displayed specified colour.","code":"# Assign colour for NA values na_clrs             = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             norm_lgd = TRUE,                             cclrs = viridis_12,                             na_colour = \"grey80\",                             yttl_width  = 0.25)  # View result na_clrs"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"break-data-into-equal-interval-bins-1","dir":"Articles","previous_headings":"Time-series heatmaps (tshhm)","what":"Break data into equal interval bins","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"function also contains option break data specified number categories, based equal interval breaks 0 maximum value within dataset. can done passing number desired categories bins.","code":"# Break legends into a specified number of bins # (of equal intervals between 0 and the maximum value in `values`) bins_15             = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             bins = 15,                             yttl_width  = 0.25)  # View result bins_15"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"manually-define-interval-breaks-1","dir":"Articles","previous_headings":"Time-series heatmaps (tshhm)","what":"Manually define interval breaks","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"times might desirable manually define intervals breaks categories. example, data highly skewed normally distributed equal interval breaks may inappropriate. Manual breaks can provided passing vector intervals cbrks. instance, hhmR function log_seq used create vector logarithmically increasing values 1 maximum value dataset.","code":"# Manually break data into categories using user-specified intervals. cbrks = log_seq(example_time_series %>% .$Immigration %>% max(na.rm = TRUE),                 12, rmv_extremes = TRUE)  # Show breaks cbrks #>  [1]    1  113  239  382  548  743  982 1291 1725 2468 # Manually assign legend categories legend_cats         = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             cbrks = cbrks,                             yttl_width  = 0.25)  # View result legend_cats"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"manually-assign-categoric-colours-1","dir":"Articles","previous_headings":"Time-series heatmaps (tshhm)","what":"Manually assign categoric colours","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"also possible manually define colour category passing vector hexcodes cclrs. length vector must two longer vector passed cbrks.","code":"# Manually assign colours to legend categories cat_clrs            = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             cbrks = cbrks,                             cclrs = viridis_12,                             na_colour = \"grey80\",                             yttl_width  = 0.25)  # View result cat_clrs"},{"path":"https://sgmmahon.github.io/hhmR/articles/hhmR_overview.html","id":"manually-define-the-order-of-x-axis-values-and-y-axis-groups","dir":"Articles","previous_headings":"Time-series heatmaps (tshhm)","what":"Manually define the order of x-axis values and y-axis groups","title":"Hierarchical Heatmaps (hhmR) Vignette","text":"variable supplied times numeric, default sort values ascending order left right along x-axis. However, order can manually changed supplying factor times. demonstrate , supplied variable Year factor years 2011-2015 ordered non-chronologically. Similarly, groups supplied Upper default displayed alphabetically top bottom along y-axis. However, order can manually changed supplying factor upper. example, supplied variable Region regions ordered North-West South-East.","code":"# Manually define order of x-axis and groups using factor levels new_time_series = example_time_series %>%                   mutate(Year   = factor(Year,                                          levels = c(2012,2011,2014,                                                     2013,2015)),                          Region = factor(Region,                                          levels = c(\"North\",\"Midlands\",                                                     \"South West\",                                                     \"South East\")))  # Manually define order of x-axis and groups rearrange_axes      = tshhm(df = new_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             cbrks = cbrks,                             cclrs = viridis_12,                             na_colour = \"grey80\",                             yttl_width  = 0.25)  # View result rearrange_axes"},{"path":"https://sgmmahon.github.io/hhmR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Mahony. Maintainer, author, copyright holder. Francisco Rowe. Author. Carmen Cabrera-Arnau. Author.","code":""},{"path":"https://sgmmahon.github.io/hhmR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Michael Mahony, Rowe F, Cabrera-Arnau C (2024). hhmR: Hierarchical Heatmaps. R package version 0.0.1, https://sgmmahon.github.io/hhmR/, https://github.com/sgmmahon/hhmR.","code":"@Manual{,   title = {hhmR: Hierarchical Heatmaps},   author = {{Michael Mahony} and Francisco Rowe and Carmen Cabrera-Arnau},   year = {2024},   note = {R package version 0.0.1, https://sgmmahon.github.io/hhmR/},   url = {https://github.com/sgmmahon/hhmR}, }"},{"path":[]},{"path":"https://sgmmahon.github.io/hhmR/index.html","id":"hierarchical-heatmaps","dir":"","previous_headings":"","what":"Hierarchical Heatmaps","title":"Hierarchical Heatmaps","text":"package allows users create high-quality heatmaps labelled hierarchical data. Specifically, requires input data form two-level hierarchical structure. produce heatmap row column represent category lower level. Rows columns grouped higher-level groupings. Names higher-level category groupings shown margins. packages (e.g. dendextend) allow heatmap rows columns arranged groups , hhmR also allows labelling data levels categories groupings. package two main functions: hhm tshhm. explained detail .","code":""},{"path":"https://sgmmahon.github.io/hhmR/index.html","id":"hhm-hierarchical-heatmap","dir":"","previous_headings":"Hierarchical Heatmaps","what":"hhm (Hierarchical Heatmap)","title":"Hierarchical Heatmaps","text":"hhm creates labelled heatmap hierarchical data. function useful create heatmap categories shown x y axis grouped way. heatmap order categories assigned groupings, present categories grouping labels along axes. example using geographic data might series smaller geographies (lower categories) aggregate larger geographical regions (upper groups). function requires data.frame containing columns specify lower categories (ylower, xlower) upper groupings (yupper, xupper). categories groupings used arrange label rows columns heatmap. data.frame must contain values variable containing values populate heatmap. Note groupings , default, arranged alphabetically (top bottom / left right). ordering groups can manually specified converting yupper /xupper factors. case, groupings ordered based ordering factor levels provided. example hhm function’s application. depth description ’s usage, see package vignette.","code":"# Import package library(hhmR)  # Import toy demonstration dataset (see `?example_migration` for details) data(example_migration)  # Intial heatmap hierarchical_heatmap = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.4)  # View result hierarchical_heatmap"},{"path":"https://sgmmahon.github.io/hhmR/index.html","id":"tshhm-time-series-hierarchical-heatmap","dir":"","previous_headings":"Hierarchical Heatmaps","what":"tshhm (Time-Series Hierarchical Heatmap)","title":"Hierarchical Heatmaps","text":"tshhm creates labelled time-series heatmap heirarchical data. function useful wish create time-series heatmap categories shown y-axis can grouped way. heatmap order categories assigned group present categories group labels along y-axis. example might series smaller geographies (lower categories) aggregate larger geographical regions (upper groups). function requires data.frame containing columns specify lower categories (lower) upper groups (upper) value corresponds . categories groups used arrange label rows heatmap. data.frame must also contain values variable, containing values used populate heatmap, times variable, containing time period value observed. Note groups upper default arranged alphabetically (top bottom). ordering groups can manually specified converting upper factor. case, groups ordered based ordering factor levels. ordering rows within group can also specified using sort_lower variable. tshhm function can used. details, see package vignette.","code":"# Import packages library(dplyr)  # Import toy demonstration dataset (see `?example_time_series` for details) data(example_time_series)  # Intial heatmap time_series_heatmap = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             yttl_width  = 0.25)  # View result time_series_heatmap"},{"path":"https://sgmmahon.github.io/hhmR/reference/cg.html","id":null,"dir":"Reference","previous_headings":"","what":"cg — cg","title":"cg — cg","text":"Creates colour gradient two hexcodes.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/cg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cg — cg","text":"","code":"cg(colour1, colour2, n = 15)"},{"path":"https://sgmmahon.github.io/hhmR/reference/cg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cg — cg","text":"colour1 first hexcode colour. colour2 second hexcode colour. n length vector returned function.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/cg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cg — cg","text":"vector hexcodes length n, containing colour gradient colour =1 colour2.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/cg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cg — cg","text":"","code":"cg(\"white\",\"black\",20) #>  [1] \"#FFFFFF\" \"#F1F1F1\" \"#E4E4E4\" \"#D6D6D6\" \"#C9C9C9\" \"#BBBBBB\" \"#AEAEAE\" #>  [8] \"#A1A1A1\" \"#939393\" \"#868686\" \"#787878\" \"#6B6B6B\" \"#5D5D5D\" \"#505050\" #> [15] \"#434343\" \"#353535\" \"#282828\" \"#1A1A1A\" \"#0D0D0D\" \"#000000\""},{"path":"https://sgmmahon.github.io/hhmR/reference/decimalplaces.html","id":null,"dir":"Reference","previous_headings":"","what":"decimalplaces — decimalplaces","title":"decimalplaces — decimalplaces","text":"Tests number non-zero decimal places within number.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/decimalplaces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"decimalplaces — decimalplaces","text":"","code":"decimalplaces(x)"},{"path":"https://sgmmahon.github.io/hhmR/reference/decimalplaces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"decimalplaces — decimalplaces","text":"x number number decimal places measured.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/decimalplaces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"decimalplaces — decimalplaces","text":"single number, indicating number non-zero decimal places `x`.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/decimalplaces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"decimalplaces — decimalplaces","text":"","code":"decimalplaces(23.43234525) #> [1] 8 decimalplaces(334.3410000000000000) #> [1] 3 decimalplaces(2.000) #> [1] 0"},{"path":"https://sgmmahon.github.io/hhmR/reference/example_migration.html","id":null,"dir":"Reference","previous_headings":"","what":"example_migration — example_migration","title":"example_migration — example_migration","text":"Fake migration dataset used demonstrate functionality hhm function hhmR package. contains information number people moved series fictional geographies. geographies hierarchical structure, county existing within smaller subset regions.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/example_migration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example_migration — example_migration","text":"","code":"data(example_migration)"},{"path":"https://sgmmahon.github.io/hhmR/reference/example_migration.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example_migration — example_migration","text":"data frame 324 rows 5 variables. Origin County county (lower-level geography) migrant began . Destination County county (lower-level geography) migrant ended . Origin Region region (higher-level geography) migrant began . Destination Region region (higher-level geography) migrant ended . Migration number migrants moved origin county destination county.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/example_migration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"example_migration — example_migration","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # Code to create dataset  # Define names of fake counties fake_counties = c(\"Greenridge\",\"Windermoor\",\"Bramblewood\",\"Silverlake\",                   \"Thornbury\",\"Maplewood\",\"Hawthorne\",\"Pinehurst\",                   \"Riverton\",\"Meadowbrook\",\"Fairhaven\",\"Oakdale\",\"Stonebridge\",                   \"Brookfield\",\"Ashford\",\"Glenville\",\"Sunnyvale\",\"Westfield\")  # Create region county lookup tables rc_lkp = data.frame(region = c(rep(\"North\",3),rep(\"Midlands\",5),                                rep(\"South West\",4),rep(\"South East\",6)),                     county = fake_counties) og_lkp = rc_lkp %>% setNames(c(\"Origin Region\"     ,\"Origin County\"     )) dn_lkp = rc_lkp %>% setNames(c(\"Destination Region\",\"Destination County\"))  # Create dataframe of fake migration data set.seed(1234) example_migration = expand.grid(fake_counties,fake_counties) %>%                     setNames(paste(c(\"Origin\",\"Destination\"),\"County\",sep=\" \")) %>%                     full_join(og_lkp) %>% full_join(dn_lkp) %>%                     mutate(Migration = (1/rgamma(18*18, shape = 17, rate = 0.5)) %>%                                        {. * 1000} %>% round()) #> Joining with `by = join_by(`Origin County`)` #> Joining with `by = join_by(`Destination County`)` example_migration[example_migration$`Origin County` ==                   example_migration$`Destination County`,\"Migration\"] =  example_migration[example_migration$`Origin County` ==                    example_migration$`Destination County`,\"Migration\"] * 10"},{"path":"https://sgmmahon.github.io/hhmR/reference/example_time_series.html","id":null,"dir":"Reference","previous_headings":"","what":"example_time_series — example_time_series","title":"example_time_series — example_time_series","text":"Fake migration dataset used demonstrate functionality tshm function hhmR package. contains information number people immigrated series fictional geographies years 2011 2015. geographies hierarchical structure, county existing within smaller subset regions.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/example_time_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example_time_series — example_time_series","text":"","code":"data(example_time_series)"},{"path":"https://sgmmahon.github.io/hhmR/reference/example_time_series.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example_time_series — example_time_series","text":"data frame 90 rows 4 variables. County county (lower-level geography) immigrants move . Region region (higher-level geography) immigrants move . Year year wave immigration occured. Immigration number immigrants moved county year.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/example_time_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"example_time_series — example_time_series","text":"","code":"library(dplyr) library(tidyr)  # Define names of fake counties fake_counties = c(\"Greenridge\",\"Windermoor\",\"Bramblewood\",\"Silverlake\",                   \"Thornbury\",\"Maplewood\",\"Hawthorne\",\"Pinehurst\",                   \"Riverton\",\"Meadowbrook\",\"Fairhaven\",\"Oakdale\",\"Stonebridge\",                   \"Brookfield\",\"Ashford\",\"Glenville\",\"Sunnyvale\",\"Westfield\")  # Create dataframe of fake migration data set.seed(1234) example_time_series = data.frame(region = c(rep(\"North\",3),rep(\"Midlands\",5),                                             rep(\"South West\",4),rep(\"South East\",6)),                                  county = fake_counties,                                  year_2011 = sample(1:10000,length(fake_counties)),                                  year_2012 = sample(1:10000,length(fake_counties)),                                  year_2013 = sample(1:10000,length(fake_counties)),                                  year_2014 = sample(1:10000,length(fake_counties)),                                  year_2015 = sample(1:10000,length(fake_counties))) %>%   setNames(c(\"Region\",\"County\",2011:2015)) %>%   pivot_longer(cols = `2011`:`2015`,                       names_to = \"Year\",                       values_to = \"Immigration\") %>%   mutate(Year = as.numeric(Year)) example_time_series[sample(1:(length(fake_counties)*5),5),\"Immigration\"] = NA"},{"path":"https://sgmmahon.github.io/hhmR/reference/exp_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"exp_seq — exp_seq","title":"exp_seq — exp_seq","text":"Creates vector exponentially increasing values 0 specified value `n`. `n` specified 1, vector scaled 0 1.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/exp_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exp_seq — exp_seq","text":"","code":"exp_seq(n, ln = 15, exponent = 2, round_values = TRUE, rmv_extremes = TRUE)"},{"path":"https://sgmmahon.github.io/hhmR/reference/exp_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"exp_seq — exp_seq","text":"n maximum value values sequence scaled . ln long vector (defaults 15). exponent exponential power multiply sequence (defaults 2). round_values Option round values whole numbers (defaults `TRUE`). `n` equals 1, round_values automatically set FALSE. rmv_extremes Option remove zero maximum value (.e. `n`) beginning end returned vector (defaults `FALSE`). Note mean length returned vector `n` - 2.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/exp_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"exp_seq — exp_seq","text":"vector containing exponentially increasing values 0 specified value `n`.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/exp_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"exp_seq — exp_seq","text":"","code":"# Create sequence of length 8, scaled between 0 and 10000 exp_seq(10000,8) #> [1]  204  816 1837 3265 5102 7347 # Set rmv_extremes = FALSE to get full sequence exp_seq(10000,8,rmv_extremes = FALSE) #> [1]     0   204   816  1837  3265  5102  7347 10000 # The exponent defaults to 2. Setting it to between 1 and 2 causes it to converge on # a linear sequence. When exponent is set to 1 the sequence increases linearly exp_seq(10000,8,exponent=1) #> [1] 1429 2857 4286 5714 7143 8571 # Setting it to greater than 2 will cause it the values in the sequence to shift towards zero exp_seq(10000,8,exponent=4) #> [1]    4   67  337 1066 2603 5398  # Create sequence of length 12, scaled between 0 and 1 exp_seq(1,12) #>  [1] 0.008264463 0.033057851 0.074380165 0.132231405 0.206611570 0.297520661 #>  [7] 0.404958678 0.528925620 0.669421488 0.826446281 exp_seq(1,12,rmv_extremes = FALSE) #>  [1] 0.000000000 0.008264463 0.033057851 0.074380165 0.132231405 0.206611570 #>  [7] 0.297520661 0.404958678 0.528925620 0.669421488 0.826446281 1.000000000 exp_seq(1,12,exponent=1) #>  [1] 0.09090909 0.18181818 0.27272727 0.36363636 0.45454545 0.54545455 #>  [7] 0.63636364 0.72727273 0.81818182 0.90909091 exp_seq(1,12,exponent=4) #>  [1] 6.830135e-05 1.092822e-03 5.532409e-03 1.748514e-02 4.268834e-02 #>  [6] 8.851854e-02 1.639915e-01 2.797623e-01 4.481251e-01 6.830135e-01"},{"path":"https://sgmmahon.github.io/hhmR/reference/hhm.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical Heatmap — hhm","title":"Hierarchical Heatmap — hhm","text":"Creates labelled heatmap heirarchical data. function useful wish create heatmap categories shown x y axis can grouped way. heatmap order categories assigned group present categories group labels along axes. example might series smaller geographies (lower categories) aggregate larger geographical regions (upper groups).","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/hhm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical Heatmap — hhm","text":"","code":"hhm(   df,   ylower,   yupper,   xlower,   xupper,   values,   rm_diag = F,   lgttl = NULL,   bins = NULL,   cbrks = NULL,   cclrs = NULL,   norm_lgd = F,   lgdps = 0,   xttl_height = 0.15,   yttl_width = 0.15 )"},{"path":"https://sgmmahon.github.io/hhmR/reference/hhm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical Heatmap — hhm","text":"df data.frame containing values populate heatmap. data.frame must include columns specifying lower categories (`ylower`, `xlower`) upper groups (`yupper`, `xupper`) value corresponds . categories groups used arrange label rows columns heatmap. must also contain `values` variable containing values used populate heatmap. Note groups default arranged alphabetically (top bottom / left right). ordering groups can manually specified converting yupper /xupper factors. case, groups ordered based ordering factor levels. ylower column `df` containing categories presented rows along y-axis heatmap. yupper column `df` containing groupings used arrange heatmap rows. xlower column `df` containing categories presented columns along x-axis heatmap. xupper column `df` containing groupings used arrange heatmap columns. values column `df` containing values used populate heatmap. rm_diag show values categories along x y axes identical (defaults `FALSE`). particularly useful origin-destination heatmaps, user may want hide diagonal values. lgttl Option manually define legend title. bins Option break data specified number groups (defaults `NULL`). thresholds groups equally spaced zero maximum value observed `values`. cbrks Vector custom breaks, users wish use discrete legend colour scheme (defaults `NULL`). example, supplied vector `c(5,10, 20)` break values 5 ordered groups ranges 0, 0-5, 5-10, 10-20 20+. cclrs Vector hexcodes, create custom legend colour scheme (defaults `NULL`). `cbrks` supplied, `cclrs` must length two longer `cbrks`. `bins` supplied, `cclrs` must length equal values provided `bins`. norm_lgd Normalised 0 1 legend (defaults `FALSE`). Allows consistency comparing heatmaps across different datasets. present, works heatmap values positive. lgdps using custom breaks, define number decimal points round legend scale (defaults 0). `norm_lgd` `TRUE`, default 3. xttl_height space allocated group titles x-axis proportion heatmap's height (defaults 0.15). yttl_width space allocated group titles y-axis proportion heatmap's width (defaults 0.15).","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/hhm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical Heatmap — hhm","text":"ggplot object containing final heatmap.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/hhm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical Heatmap — hhm","text":"","code":"# Import toy demonstration dataset (see `?example_migration` for see details) data(example_migration)  # Intial heatmap hierarchical_heatmap = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.4)  # View result hierarchical_heatmap   # Remove diagonal from heatmap (i.e. hide static populations) removed_diag         = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.4,                            rm_diag = TRUE)  # View result removed_diag   # Nomalise the legend normalised_lgd       = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.4,                            rm_diag = TRUE,                            norm_lgd = TRUE)  # View result normalised_lgd   # Manually define colour scheme for heatmap (uses viridis colour scheme) viridis_12 = c(\"#440154FF\",\"#482173FF\",\"#433E85FF\",\"#38598CFF\",\"#2D708EFF\",\"#25858EFF\",                \"#1E9B8AFF\",\"#2BB07FFF\",\"#51C56AFF\",\"#85D54AFF\",\"#C2DF23FF\",\"#FDE725FF\")  # Assign continuous colour scheme cont_clrs            = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.4,                            rm_diag = TRUE,                            norm_lgd = TRUE,                            cclrs = viridis_12)  # View result cont_clrs   # Break legends into a specified number of bins # (of equal intervals between 0 and the maximum value in `values`) bins_15              = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.4,                            rm_diag = TRUE,                            bins = 15)  # View result bins_15   # Manually break data into categories using user-specified intervals. # In this instance, the `hhmR` function `log_seq` has been used to create a # vector of logarithmicly increasing values between 1 and the maximum value # in the dataset not on the diagonal. cbrks = log_seq(example_migration[example_migration[[\"Origin County\"     ]] !=                                   example_migration[[\"Destination County\"]],] %>%                 .$Migration %>% max(), 12, rmv_extremes = TRUE)  # Manually assign legend categories legend_cats          = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.4,                            rm_diag = TRUE,                            cbrks = cbrks)  # View result legend_cats   # Manually assign colours to legend categories cat_clrs             = hhm(df = example_migration,                            ylower = \"Origin County\",                            xlower = \"Destination County\",                            yupper = \"Origin Region\",                            xupper = \"Destination Region\",                            values = \"Migration\",                            yttl_width = 0.22,                            xttl_height = 0.4,                            rm_diag = TRUE,                            cbrks = cbrks,                            cclrs = viridis_12)  # View result cat_clrs"},{"path":"https://sgmmahon.github.io/hhmR/reference/log_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"log_seq — log_seq","title":"log_seq — log_seq","text":"Creates vector logarithmicly increasing values 0 specified value `n`. `n` specified 1, vector scaled 0 1.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/log_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"log_seq — log_seq","text":"","code":"log_seq(n, ln = 15, round_values = T, rmv_extremes = F)"},{"path":"https://sgmmahon.github.io/hhmR/reference/log_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"log_seq — log_seq","text":"n maximum value values sequence scaled . ln long vector (defaults 15). round_values Option round values whole numbers (defaults `TRUE`). rmv_extremes Option remove zero maximum value (.e. `n`) beginning end returned vector (defaults `FALSE`). Note mean length returned vector `n` - 2.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/log_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"log_seq — log_seq","text":"vector containing logarithmicly increasing values 0 specified value `n`.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/log_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"log_seq — log_seq","text":"","code":"# Create sequence of length 20, scaled between 0 and 500 log_seq(500,20) #>  [1]   0   1   5   9  15  20  26  33  40  47  56  65  76  88 103 120 143 176 230 #> [20] 500  # Create sequence of length 15, scaled between 0 and 1 log_seq(1,12) #>  [1] 0.00000000 0.01378309 0.02901789 0.04604662 0.06534885 0.08762656 #>  [7] 0.11396728 0.14619111 0.18770495 0.24613758 0.34569044 1.00000000"},{"path":"https://sgmmahon.github.io/hhmR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://sgmmahon.github.io/hhmR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/plt_ttl.html","id":null,"dir":"Reference","previous_headings":"","what":"plt_ttl — plt_ttl","title":"plt_ttl — plt_ttl","text":"Creates plot containing name given upper group. Used combination patchwork package plot names upper groups within hhm function.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/plt_ttl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plt_ttl — plt_ttl","text":"","code":"plt_ttl(ttl, axs = \"x\", rotate_title = TRUE)"},{"path":"https://sgmmahon.github.io/hhmR/reference/plt_ttl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plt_ttl — plt_ttl","text":"ttl name upper group. axs axis name appear (defaults \"x\"). `x`, text written top-centre plot. `y`, text written middle-right plot. rotate_title Whether title rotate perpendicular axis (defaults TRUE). TRUE, title text x y axes printed horizontally vertically respectively, reverse orientation set FALSE.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/plt_ttl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plt_ttl — plt_ttl","text":"ggplot object containing title given upper group, use hhm function.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/plt_ttl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plt_ttl — plt_ttl","text":"","code":"plt_ttl(\"Group 1\", axs = \"y\")  plt_ttl(\"Group 2\")  plt_ttl(\"Group 1\", axs = \"y\",rotate_title = FALSE)  plt_ttl(\"Group 2\"           ,rotate_title = FALSE)"},{"path":"https://sgmmahon.github.io/hhmR/reference/tshhm.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-series Hierarchical Heatmap — tshhm","title":"Time-series Hierarchical Heatmap — tshhm","text":"Creates labelled time-series heatmap heirarchical data. function useful wish create time-series heatmap categories shown y axis can grouped way. heatmap order categories assigned group present categories group labels along y-axis. example might series smaller geographies (lower categories) aggregate larger geographical regions (upper groups).","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/tshhm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-series Hierarchical Heatmap — tshhm","text":"","code":"tshhm(   df,   lower,   upper,   times,   values,   sort_lower = \"alphabetical\",   lgttl = NULL,   bins = NULL,   cbrks = NULL,   cclrs = NULL,   norm_lgd = F,   lgdps = 0,   na_colour = NULL,   xttl_height = 0.05,   yttl_width = 0.15 )"},{"path":"https://sgmmahon.github.io/hhmR/reference/tshhm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time-series Hierarchical Heatmap — tshhm","text":"df data.frame containing values populate heatmap. data.frame must include columns specifying lower categories (`lower`) upper groups (`upper`) value corresponds . categories groups used arrange label rows heatmap. `df` must also contain `values` variable, containing values used populate heatmap, `times` variable, containing time period value observed. Note groups `upper` default arranged alphabetically (top bottom). ordering groups can manually specified converting `upper` factor. case, groups ordered based ordering factor levels. ordering rows within group can also specified using `sort_lower` variable. lower column `df` containing categories presented rows along y-axis heatmap. upper column `df` containing groupings used arrange heatmap rows. times column `df` containing time-period value `values` observed. values column `df` containing values used populate heatmap. sort_lower Option define rows (lower) within group (upper) ordered. default option `alphabetical`, orders rows alphabetical order top bottom. options include `sum_ascend` `mean_ascend`, order rows ascending order (top bottom) based row totals row means respectively. order can reversed options `sum_descend` `mean_descend`. lgttl Option manually define legend title. bins Option break data specified number groups (defaults `NULL`). thresholds groups equally spaced minimum maximum values observed `values`. cbrks Vector custom breaks, users wish use discrete legend colour scheme (defaults `NULL`). example, supplied vector `c(5,10, 20)` break values 5 ordered groups ranges 0, 0-5, 5-10, 10-20 20+. cclrs Vector hexcodes, create custom legend colour scheme (defaults `NULL`). `cbrks` supplied, `cclrs` must length two longer `cbrks`. `bins` supplied, `cclrs` must length equal values provided `bins`. norm_lgd Normalised 0 1 legend (defaults `FALSE`). Allows consistency comparing heatmaps across different datasets. present, works heatmap values positive. lgdps using custom breaks, define number decimal points round legend scale (defaults 0). `norm_lgd` `TRUE`, default 3. na_colour Option define colour NA values legend (defaults `NULL`, meaning NA values assigned colour). xttl_height space allocated title x-axis proportion heatmap's height (defaults 0.05). yttl_width space allocated group titles y-axis proportion heatmap's width (defaults 0.15).","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/tshhm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time-series Hierarchical Heatmap — tshhm","text":"ggplot object containing final heatmap.","code":""},{"path":"https://sgmmahon.github.io/hhmR/reference/tshhm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-series Hierarchical Heatmap — tshhm","text":"","code":"library(dplyr)  # Import toy demonstration dataset (see `?example_time_series` for see details) data(example_time_series)  # Intial heatmap time_series_heatmap = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             yttl_width  = 0.25)  # View result time_series_heatmap   # Arrange counties within each region by total number of immigrants # across all five years (ascending from top to bottom) sort_ascending      = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             yttl_width  = 0.25)  # View result sort_ascending   # Nomalise the legend normalised_lgd      = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             norm_lgd = TRUE,                             yttl_width  = 0.25)  # View result normalised_lgd   # Manually define colour scheme for heatmap (uses viridis colour scheme) viridis_12 = c(\"#440154FF\",\"#482173FF\",\"#433E85FF\",\"#38598CFF\",\"#2D708EFF\",\"#25858EFF\",                \"#1E9B8AFF\",\"#2BB07FFF\",\"#51C56AFF\",\"#85D54AFF\",\"#C2DF23FF\",\"#FDE725FF\")  # Assign continuous colour scheme cont_clrs           = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             norm_lgd = TRUE,                             cclrs = viridis_12,                             yttl_width  = 0.25)  # View result cont_clrs   # Assign colour for NA values na_clrs             = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             norm_lgd = TRUE,                             cclrs = viridis_12,                             na_colour = \"grey80\",                             yttl_width  = 0.25)  # View result na_clrs   # Break legends into a specified number of bins # (of equal intervals between 0 and the maximum value in `values`) bins_15             = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             bins = 15,                             yttl_width  = 0.25)  # View result bins_15   # Manually break data into categories using user-specified intervals. # In this instance, the `hhmR` function `log_seq` has been used to create a # vector of logarithmicly increasing values between 1 and the maximum value # in the dataset. cbrks = log_seq(example_time_series %>% .$Immigration %>% max(na.rm = TRUE),                 12, rmv_extremes = TRUE)  # Manually assign legend categories legend_cats         = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             cbrks = cbrks,                             yttl_width  = 0.25)  # View result legend_cats   # Manually assign colours to legend categories cat_clrs            = tshhm(df = example_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             cbrks = cbrks,                             cclrs = viridis_12,                             na_colour = \"grey80\",                             yttl_width  = 0.25)  # View result cat_clrs   # Manually define order of x-axis and groups using factor levels new_time_series = example_time_series %>%                   mutate(Year   = factor(Year,                                          levels = c(2012,2011,2014,                                                     2013,2015)),                          Region = factor(Region,                                          levels = c(\"North\",\"Midlands\",                                                     \"South West\",                                                     \"South East\")))  # Manually define order of x-axis and groups rearrange_axes      = tshhm(df = new_time_series,                             lower  = \"County\",                             upper  = \"Region\",                             times  = \"Year\",                             values = \"Immigration\",                             sort_lower = \"sum_ascend\",                             cbrks = cbrks,                             cclrs = viridis_12,                             na_colour = \"grey80\",                             yttl_width  = 0.25)  # View result rearrange_axes"},{"path":"https://sgmmahon.github.io/hhmR/news/index.html","id":"hhmr-001","dir":"Changelog","previous_headings":"","what":"hhmR 0.0.1","title":"hhmR 0.0.1","text":"Initial CRAN submission.","code":""}]

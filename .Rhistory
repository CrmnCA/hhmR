library(tidyverse)
library(stringi)
library(scales)
library(ggplot2)
library(patchwork)
library(grDevices)
library(RColorBrewer)
sessionInfo()
#ghp = "C:/Users/sgmmahon/Documents/GitHub/timely/"
ghp = "C:/Users/micha/OneDrive/Documents/GitHub/timely/"
dp  = "//rfs01/rdm01/Timely/data/"
lp  = "_lookups/"
mtp = "_matrices/"
olp = "_outliers/"
cnp = "census/"
csp = "casen/"
erp = "electoral-roll/"
msp = "msdf/"
twp = "twitter/"
vfp = "vector-files/"
ptp = "manuscript/plots/"
scp = "1_scatter_plots/"
bcp = "2_bar_charts/"
hmp = "3_heatmaps/"
crp = "4_correlation_plots/"
hbp = "5_hybrid_plots/"
tbp = "6_tables/"
mcp = "7_misc/"
aap = "8_additional_analysis/"
mfp = "1_migration_flow/"
omp = "2_out_migration/"
imp = "3_in_migration/"
nmp = "4_net_migration/"
pfp = "5_proportion_of_migration_flow/"
smp = "_supplementary_materials/"
# Import long-format migration matrices
provincia = read.table(paste0(dp,mtp,"provincia_matrices_long_format.csv"), header = T, sep = ",", na = "") %>% setNames(c("Origin  ~  Destination",names(.)[2:ncol(.)]))
region    = read.table(paste0(dp,mtp,"region_matrices_long_format.csv")   , header = T, sep = ",", na = "") %>% setNames(c("Origin  ~  Destination",names(.)[2:ncol(.)]))
# Import lookup tables
lkp    = read.csv(paste0(dp,lp,"chile_provincia_region_lookup_table.csv"))
# Create origin and destination versions of lookup table for joining
lkp_og = lkp %>% setNames(c("Origin"     ,"ogr"))
lkp_dn = lkp %>% setNames(c("Destination","dnr"))
# Assign origin and destination regions to provincia data
provincia = provincia %>% full_join(lkp_og) %>% full_join(lkp_dn) %>% arrange(ogr,Origin,dnr,Destination) %>% .[c(1:3,((ncol(.)-1):(ncol(.))),(4:(ncol(.)-2)))]
provincia
print( "Local Authority", 1:18, collapse = " ")
paste( "Local Authority", 1:18, collapse = " ")
paste( "Local Authority", 1:18, sep = " ")
?expand.grid
expand.grid(paste("Local Authority", 1:18, sep = " "),paste("Local Authority", 1:18, sep = " "))
expand.grid(paste("County", 1:18, sep = " "),paste("County", 1:18, sep = " "))
region_county_lookup = data.frame( origin_region = c(rep("Region 1",3),rep("Region 2",5),rep("Region 3",4),rep("Region 4",6)),
origin_county = paste("County", 1:18, sep = " "))
region_county_lookup = data.frame( region = c(rep("Region 1",3),rep("Region 2",5),rep("Region 3",4),rep("Region 4",6)),
county = paste("County", 1:18, sep = " "))
# Create region county lookup table
rc_lkp = data.frame( region = c(rep("Region 1",3),rep("Region 2",5),rep("Region 3",4),rep("Region 4",6)),
county = paste("County", 1:18, sep = " "))
# Create region county lookup tables
rc_lkp = data.frame( region = c(rep("Region 1",3),rep("Region 2",5),rep("Region 3",4),rep("Region 4",6)),
county = paste("County", 1:18, sep = " "))
rc_lkp
# Create region county lookup tables
rc_lkp = data.frame( region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)),
county = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
"Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
"Brookfield","Ashford","Glenville","Sunnyvale","Westfield"))
expand.grid(fake_counties,fake_counties)
# Define names of fake counties
fake_counties = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
"Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
"Brookfield","Ashford","Glenville","Sunnyvale","Westfield")
# Create region county lookup tables
rc_lkp = data.frame(region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)), county = fake_counties)
og_lkp = rc_lkp %>% setNames(c("Origin Region"     ,"Origin County"     )
paste("Local Authority", 1:18, sep = " "),expand.grid(unique(lkp[[geo]]),unique(lkp[[geo]]))
dn_lkp
dn_lkp = rc_lkp %>% setNames(c("Destination Region","Destination County")
dn_lkp
# Define names of fake counties
fake_counties = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
"Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
"Brookfield","Ashford","Glenville","Sunnyvale","Westfield")
# Create region county lookup tables
rc_lkp = data.frame(region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)), county = fake_counties)
og_lkp = rc_lkp %>% setNames(c("Origin Region"     ,"Origin County"     )
dn_lkp = rc_lkp %>% setNames(c("Destination Region","Destination County")
# Define names of fake counties
fake_counties = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
"Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
"Brookfield","Ashford","Glenville","Sunnyvale","Westfield")
# Create region county lookup tables
rc_lkp = data.frame(region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)), county = fake_counties)
og_lkp = rc_lkp %>% setNames(c("Origin Region"     ,"Origin County"     ))
dn_lkp = rc_lkp %>% setNames(c("Destination Region","Destination County"))
dn_lkp
# Define names of fake counties
fake_counties = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
"Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
"Brookfield","Ashford","Glenville","Sunnyvale","Westfield")
# Create region county lookup tables
rc_lkp = data.frame(region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)), county = fake_counties)
og_lkp = rc_lkp %>% setNames(c("Origin Region"     ,"Origin County"     ))
dn_lkp = rc_lkp %>% setNames(c("Destination Region","Destination County"))
# Create dataframe of fake migration data
od_df = expand.grid(fake_counties,fake_counties) %>% full_join(og_lkp) %>% full_join(dn_lkp)
expand.grid(fake_counties,fake_counties) %>% setNames(paste(c("Origin","Destination"),"County",sep=" "))
expand.grid(fake_counties,fake_counties) %>% setNames(paste(c("Origin","Destination"),"County",sep=" ")) %>% full_join(og_lkp) %>% full_join(dn_lkp)
rpois(18*18,20)
rpois(18*18,20) %>% hist(breaks = 100)
rpois(18*18,0.5) %>% hist(breaks = 100)
rpois(18*18,100) %>% hist(breaks = 100)
?rpois
rpois(18*18, lambda = 100) %>% hist(breaks = 100)
rpois(18*18, lambda = 5) %>% hist(breaks = 100)
rpois(18*18, rate = 5) %>% hist(breaks = 100)
1/rgamma(10000, shape = 1, rate = 0.5)
1/rgamma(10000, shape = 1, rate = 0.5) %>% hist(breaks = 100)
1/rgamma(10000, shape = 1, rate = 0.5) %>% {. * 10000} %>% hist(breaks = 100)
1/rgamma(10000, shape = 1, rate = 0.5)
(1/rgamma(10000, shape = 1, rate = 0.5)) %>% {. * 10000} %>% hist(breaks = 100)
(1/rgamma(10000, shape = 1, rate = 0.5)) %>% {. * 10000}
(1/rgamma(10000, shape = 1, rate = 0.5)) %>% {. * 10000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 100, rate = 0.5)) %>% {. * 10000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 10, rate = 0.5)) %>% {. * 10000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 5, rate = 0.5)) %>% {. * 10000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 5, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 5, rate = 0.9)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 5, rate = 1)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 5, rate = 20)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 5, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 5, rate = 0.1)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 10, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 15, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 20, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
set.seed(1234)
(1/rgamma(10000, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
set.seed(1234)
(1/rgamma(10000, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
set.seed(1234)
(1/rgamma(10000, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
set.seed(1234)
(1/rgamma(10000, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
(1/rgamma(10000, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
set.seed(1234)
(1/rgamma(10000, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round() %>% hist(breaks = 100)
# Import package
#library(hhmR)
# Define names of fake counties
fake_counties = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
"Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
"Brookfield","Ashford","Glenville","Sunnyvale","Westfield")
# Create region county lookup tables
rc_lkp = data.frame(region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)), county = fake_counties)
og_lkp = rc_lkp %>% setNames(c("Origin Region"     ,"Origin County"     ))
dn_lkp = rc_lkp %>% setNames(c("Destination Region","Destination County"))
# Create dataframe of fake migration data
set.seed(1234)
od_df = expand.grid(fake_counties,fake_counties) %>% setNames(paste(c("Origin","Destination"),"County",sep=" ")) %>% full_join(og_lkp) %>% full_join(dn_lkp) %>%
mutate(Migration = (1/rgamma(10000, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round())
# Import package
#library(hhmR)
# Define names of fake counties
fake_counties = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
"Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
"Brookfield","Ashford","Glenville","Sunnyvale","Westfield")
# Create region county lookup tables
rc_lkp = data.frame(region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)), county = fake_counties)
og_lkp = rc_lkp %>% setNames(c("Origin Region"     ,"Origin County"     ))
dn_lkp = rc_lkp %>% setNames(c("Destination Region","Destination County"))
# Create dataframe of fake migration data
set.seed(1234)
od_df = expand.grid(fake_counties,fake_counties) %>% setNames(paste(c("Origin","Destination"),"County",sep=" ")) %>% full_join(og_lkp) %>% full_join(dn_lkp) %>%
mutate(Migration = (1/rgamma(18*18, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round())
od_df
od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"]
# Import package
#library(hhmR)
# Define names of fake counties
fake_counties = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
"Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
"Brookfield","Ashford","Glenville","Sunnyvale","Westfield")
# Create region county lookup tables
rc_lkp = data.frame(region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)), county = fake_counties)
og_lkp = rc_lkp %>% setNames(c("Origin Region"     ,"Origin County"     ))
dn_lkp = rc_lkp %>% setNames(c("Destination Region","Destination County"))
# Create dataframe of fake migration data
set.seed(1234)
od_df = expand.grid(fake_counties,fake_counties) %>% setNames(paste(c("Origin","Destination"),"County",sep=" ")) %>% full_join(og_lkp) %>% full_join(dn_lkp) %>%
mutate(Migration = (1/rgamma(18*18, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round())
od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] = od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] * 10
od_df
# Import package
#library(hhmR)
# Define names of fake counties
fake_counties = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
"Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
"Brookfield","Ashford","Glenville","Sunnyvale","Westfield")
# Create region county lookup tables
rc_lkp = data.frame(region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)), county = fake_counties)
og_lkp = rc_lkp %>% setNames(c("Origin Region"     ,"Origin County"     ))
dn_lkp = rc_lkp %>% setNames(c("Destination Region","Destination County"))
# Create dataframe of fake migration data
set.seed(1234)
od_df = expand.grid(fake_counties,fake_counties) %>% setNames(paste(c("Origin","Destination"),"County",sep=" ")) %>% full_join(og_lkp) %>% full_join(dn_lkp) %>%
mutate(Migration = (1/rgamma(18*18, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round())
od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] = od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] * 10
# Check data
od_df
# Import package
#library(hhmR)
# Define names of fake counties
fake_counties = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
"Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
"Brookfield","Ashford","Glenville","Sunnyvale","Westfield")
# Create region county lookup tables
rc_lkp = data.frame(region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)), county = fake_counties)
og_lkp = rc_lkp %>% setNames(c("Origin Region"     ,"Origin County"     ))
dn_lkp = rc_lkp %>% setNames(c("Destination Region","Destination County"))
# Create dataframe of fake migration data
set.seed(1234)
od_df = expand.grid(fake_counties,fake_counties) %>% setNames(paste(c("Origin","Destination"),"County",sep=" ")) %>% full_join(og_lkp) %>% full_join(dn_lkp) %>%
mutate(Migration = (1/rgamma(18*18, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round())
od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] = od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] * 10
# Check data
od_df
# Import package
#library(hhmR)
# Define names of fake counties
fake_counties = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
"Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
"Brookfield","Ashford","Glenville","Sunnyvale","Westfield")
# Create region county lookup tables
rc_lkp = data.frame(region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)), county = fake_counties)
og_lkp = rc_lkp %>% setNames(c("Origin Region"     ,"Origin County"     ))
dn_lkp = rc_lkp %>% setNames(c("Destination Region","Destination County"))
# Create dataframe of fake migration data
set.seed(1234)
od_df = expand.grid(fake_counties,fake_counties) %>% setNames(paste(c("Origin","Destination"),"County",sep=" ")) %>% full_join(og_lkp) %>% full_join(dn_lkp) %>%
mutate(Migration = (1/rgamma(18*18, shape = 20, rate = 0.5)) %>% {. * 1000} %>% round())
od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] = od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] * 10
# Check data
od_df
# Import package
#library(hhmR)
# Define names of fake counties
fake_counties = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
"Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
"Brookfield","Ashford","Glenville","Sunnyvale","Westfield")
# Create region county lookup tables
rc_lkp = data.frame(region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)), county = fake_counties)
og_lkp = rc_lkp %>% setNames(c("Origin Region"     ,"Origin County"     ))
dn_lkp = rc_lkp %>% setNames(c("Destination Region","Destination County"))
# Create dataframe of fake migration data
set.seed(1234)
od_df = expand.grid(fake_counties,fake_counties) %>% setNames(paste(c("Origin","Destination"),"County",sep=" ")) %>% full_join(og_lkp) %>% full_join(dn_lkp) %>%
mutate(Migration = (1/rgamma(18*18, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round())
od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] = od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] * 10
# Check data
od_df
# Import package
#library(hhmR)
# Define names of fake counties
fake_counties = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
"Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
"Brookfield","Ashford","Glenville","Sunnyvale","Westfield")
# Create region county lookup tables
rc_lkp = data.frame(region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)), county = fake_counties)
og_lkp = rc_lkp %>% setNames(c("Origin Region"     ,"Origin County"     ))
dn_lkp = rc_lkp %>% setNames(c("Destination Region","Destination County"))
# Create dataframe of fake migration data
set.seed(1234)
od_df = expand.grid(fake_counties,fake_counties) %>% setNames(paste(c("Origin","Destination"),"County",sep=" ")) %>% full_join(og_lkp) %>% full_join(dn_lkp) %>%
mutate(Migration = (1/rgamma(18*18, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round())
od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] = od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] * 10
# Check data
od_df
lkp[["provincia"]]
expand.grid(Origin = lkp[["provincia"]], Destination = lkp[["provincia"]]) %>% full_join(lkp_og) %>% full_join(lkp_dn)
# Create lookup table of all origin and destination provincias
od_lkp = expand.grid(Origin = lkp[["provincia"]], Destination = lkp[["provincia"]]) %>% full_join(lkp_og) %>% full_join(lkp_dn)
df = od_df
ylower = "Origin County"
xlower = "Destination County"
yupper = "Origin Region"
xupper = "Destination Region"
values = "Migration"
df = od_df
ylower = "Origin County"
xlower = "Destination County"
yupper = "Origin Region"
xupper = "Destination Region"
values = "Migration"
diagonal = F
bins = 15
# Remove unwanted rows and format origin so geographies appear in alphabetical order
df = df[,c(ylower,xlower,yupper,xupper,values)]
df
df[[ylower]]
df[[ylower]] == df[[xlower]]
bns
df = od_df
ylower = "Origin County"
xlower = "Destination County"
yupper = "Origin Region"
xupper = "Destination Region"
values = "Migration"
rm_diag = F
bins = 15
log_seq(999,bns)
n = 5
ln = 15
seq(1, n, length.out = ln-1)
}
#' set.seed(1234)
#' od_df = expand.grid(fake_counties,fake_counties) %>% setNames(paste(c("Origin","Destination"),"County",sep=" ")) %>% full_join(og_lkp) %>% full_join(dn_lkp) %>%
#'         mutate(Migration = (1/rgamma(18*18, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round())
#' od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] = od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] * 10
#'
#' # RUN FUNCTION
#'
#' hierarchical_heatmap = hhm(df = od_df, ylower = "Origin County", xlower = "Destination County", yupper = "Origin Region", xupper = "Destination Region", values = "values")
#' @export
#' @importFrom dplyr "%>%"
log_seq = function(n,ln=15) {
log_seq = function(n,ln=15) {
# Create a sequence from 1 to n
seq = seq(1, n, length.out = ln-1)
# Apply the logarithm to the sequence
log_seq = log(seq)
# Scale the sequence to the range [0, 1]
min_val = min(log_seq)
max_val = max(log_seq)
one_seq = ((log_seq - min_val) / (max_val - min_val))
# Reverse pattern of scale so breaks are focussed on lower rather than upper end of scale
one_seq_rev = one_seq %>% {. - max(.)} %>% {. * -1} %>% rev()
# Scale sequence to n
scaled_one_seq = one_seq_rev %>% {. * n} %>% round() %>% {. + 1} %>% c(0,.)
return(scaled_one_seq)
}
log_seq(5,15)
dsafkj
df = od_df
ylower = "Origin County"
xlower = "Destination County"
df = od_df
ylower = "Origin County"
xlower = "Destination County"
yupper = "Origin Region"
xupper = "Destination Region"
values = "Migration"
rm_diag = F
bins = 15
#' @title hhm
#'
#' @description Creates a labelled heatmap for heirarchical data.
#'
#' @param df A data.frame with containing values with which to populate the heatmap.
#' The data.frame must nclude columns specifying the lower categories (ylower,
#' xlower) and upper groups (yupper, xupper) that each value corresponds to. These
#' categories and groups will be used to arrange and label the rows and columns of
#' the heatmap.
#' @param ylower A column in `df` containing the categories that will be presented
#' as rows along the y-axis of the heatmap.
#' @param xlower A column in `df` containing the categories that will be presented
#' as columns along the x-axis of the heatmap.
#' @param yupper A column in `df` containing the groupings that will be used to
#' arrange the heatmap rows.
#' @param xupper A column in `df` containing the groupings that will be used to
#' arrange the heatmap columns.
#' @param values A column in `df` containing the values used to populate the
#' heatmap.
#' @param rm_diag Do not show values for categories along the x and y axes that
#' are identical (defaults to `FALSE`). This is particularly useful for
#' origin-destination where the user may want to hide the diagonal values.
#' @param bins How many colour gradients to use in the legend (defaults to 15).
#'
#' @return A ggplot object containing the final heatmap.
#'
#' @examples
#' # CREATE TOY DATA OF INTERNAL MIGRATION BETWEEN COUNTIES (LOWER LEVEL) AND REGIONS (UPPER LEVEL)
#'
#' # Define names of fake counties
#' fake_counties = c("Greenridge","Windermoor","Bramblewood","Silverlake","Thornbury","Maplewood",
#'                   "Hawthorne","Pinehurst","Riverton","Meadowbrook","Fairhaven","Oakdale","Stonebridge",
#'                   "Brookfield","Ashford","Glenville","Sunnyvale","Westfield")
#'
#' # Create region county lookup tables
#' rc_lkp = data.frame(region = c(rep("North",3),rep("Midlands",5),rep("South West",4),rep("South East",6)), county = fake_counties)
#' og_lkp = rc_lkp %>% setNames(c("Origin Region"     ,"Origin County"     ))
#' dn_lkp = rc_lkp %>% setNames(c("Destination Region","Destination County"))
#'
#' # Create dataframe of fake migration data
#' set.seed(1234)
#' od_df = expand.grid(fake_counties,fake_counties) %>% setNames(paste(c("Origin","Destination"),"County",sep=" ")) %>% full_join(og_lkp) %>% full_join(dn_lkp) %>%
#'         mutate(Migration = (1/rgamma(18*18, shape = 17, rate = 0.5)) %>% {. * 1000} %>% round())
#' od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] = od_df[od_df$`Origin County` == od_df$`Destination County`,"Migration"] * 10
#'
#' # RUN FUNCTION
#'
#' hierarchical_heatmap = hhm(df = od_df, ylower = "Origin County", xlower = "Destination County", yupper = "Origin Region", xupper = "Destination Region", values = "values")
#' @export
#' @importFrom dplyr "%>%"
hhm = function(df,ylower,yupper,xlower,xupper,values,rm_diag=F,bins=15) {
# Remove unwanted rows and format origin so geographies appear in alphabetical order
df = df[,c(ylower,xlower,yupper,xupper,values)]
# If user specified to remove diagonal values, set all observations where ylower and xlower are identical to zero
if (rm_diag) {
df[df[[ylower]] == df[[xlower]],values] = 0
}
# Create custom breaks for log scale
cbrks = log_seq(999,bns) / 1000
# Define names of custom breaks
brk_nms = c(0, paste(cbrks %>% .[1:(length(.)-1)] %>% sprintf(fmt = paste0('%#.3f')),
cbrks %>% .[2: length(.)   ] %>% sprintf(fmt = paste0('%#.3f')), sep = "-"))
# Create discrete scale based on these custom breaks
df[["scaled"]] = df[[paste0(var,"_scld")]] %>% findInterval(cbrks) %>% ifelse(df[[paste0(var,"_scld")]] == 0, 0, .) %>%
replace(. == length(cbrks), (length(cbrks)-1)) %>% {. + 1} %>% factor(levels = 1:bns, labels = brk_nms)
# Create empty list to populate with ggplot heatmaps
pl = list()
# Counter to keep track of interations of nested for loop
i = 0
# For each origin region
for (og in 1:length(rgns)) {
# For each destination region
for (dn in 1:length(rgns)) {
# Increase interature counter by 1
i = i + 1
# Filter provincia-level migration data to only include origin and destination regions of interest
sdf = df %>% filter(ogr == rgns[og] & dnr == rgns[dn]) %>%
mutate(Origin = factor(Origin, levels = Origin %>% unique() %>% rev() ))
# Define main plot
p = ggplot(sdf, aes(Destination, Origin)) +
geom_tile(aes(fill = scaled), show.legend = T) +
scale_fill_manual(name = "Normalised\nCount", values = cg("white","#08306B",bns), drop = F) +
theme(plot.margin = unit(rep(0,4), "cm"),
axis.text.x  = element_text(angle = 90, hjust = 1.0, vjust = 0.3),
axis.title.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5),
axis.title.y = element_text(angle =  0, hjust = 0.5, vjust = 0.5),
axis.ticks   = element_blank()) +
labs(x = rgns[dn], y = rgns[og])
# If bottom-left plot
if (og == length(rgns) & dn == 1) {
# Include provincia names on both axes
p = p + theme(axis.title.x = element_blank(),
axis.title.y = element_blank())
} else if (og < length(rgns) & dn == 1) { # If left-hand plot
# Include provincia names on y-axis
p = p + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x  = element_blank())
} else if (og == length(rgns) & dn > 1) { # If bottom plot
# Include provincia names on x-axis
p = p + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank())
} else { # If plot not on left of bottom edges of multiplot
# Remove provincia names
p = p + theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x  = element_blank(),
axis.text.y  = element_blank())
}
# Add ggplot to plot list
pl[[i]] = p
}
}
# Return list of plots
return(pl)
}
log_seq = function(n,ln=15) {
# Create a sequence from 1 to n
seq = seq(1, n, length.out = ln-1)
# Apply the logarithm to the sequence
log_seq = log(seq)
# Scale the sequence to the range [0, 1]
min_val = min(log_seq)
max_val = max(log_seq)
one_seq = ((log_seq - min_val) / (max_val - min_val))
# Reverse pattern of scale so breaks are focussed on lower rather than upper end of scale
one_seq_rev = one_seq %>% {. - max(.)} %>% {. * -1} %>% rev()
# Scale sequence to n
scaled_one_seq = one_seq_rev %>% {. * n} %>% round() %>% {. + 1} %>% c(0,.)
return(scaled_one_seq)
}
log_seq(5,15)
n = 5
log_seq = function(n,ln=15) {
# Create a sequence from 1 to n
seq = seq(1, n, length.out = ln-1)
# Apply the logarithm to the sequence
log_seq = log(seq)
# Scale the sequence to the range [0, 1]
min_val = min(log_seq)
max_val = max(log_seq)
one_seq = ((log_seq - min_val) / (max_val - min_val))
# Reverse pattern of scale so breaks are focussed on lower rather than upper end of scale
one_seq_rev = one_seq %>% {. - max(.)} %>% {. * -1} %>% rev()
# Scale sequence to n
scaled_one_seq = one_seq_rev %>% {. * n} %>% round() %>% {. + 1} %>% c(0,.) %>% {. / (n + 1)}
return(scaled_one_seq)
}
log_seq(5,15)
log_seq(1000,15)
log_seq(1000,25)
log_seq(500,25)
log_seq(500,5)
